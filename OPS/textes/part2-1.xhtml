<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="fr" lang="fr">
  <head>
    <title>Les modèles économiques du logiciel libre et leur évolution</title>
    <link rel="stylesheet" href="../styles/stylesheet.css" type="text/css" />
  </head>
  <body epub:type="bodymatter chapter">
    <h2 id="part2-5" class="titre-chapitre">
      5. Les modèles économiques du logiciel libre et leur évolution
    </h2>
    <p class="signature">
      Stéphane <span class="auteur">Ribas</span>,<br />
      Patrick <span class="auteur">Guillaud</span>,<br />
      Stéphanei <span class="auteur">Ubéda</span>
    </p>

    <nav id="TOC" epub:type="bodymatter toc" class="epub-toc">
      <ol>
        <li><a href="#part2-5.1">5.1 Années 1960 et 1970, les débuts de l’informatique : des modèles économiques basés sur le matériel</a></li>
        <li><a href="#part2-5.2">5.2 Années 1980, l’époque des pionniers du Libre</a></li>
        <li><a href="#part2-5.3">5.3 Années 1990, naissance de GNU/Linux : du logiciel libre à l’<i lang="en" xml:lang="en" class="droit">Open Source Initiative</i> (<abbr>OSI</abbr>)</a></li>
        <li><a href="#part2-5.4">5.4 Première décennie 2000, professionnalisation de l’<i lang="en" xml:lang="en">open source</i> et structuration d’un nouveau secteur économique</a>
          <ol>
            <li><a href="#part2-5.4.1">5.4.1 Eclipse et son écosystème</a></li>
            <li><a href="#part2-5.4.2">5.4.2 Les solutions d’entreprises</a></li>
            <li><a href="#part2-5.4.3">5.4.3 Quelques remarques sur le bazar</a></li>
            <li><a href="#part2-5.4.4">5.4.4 Dans les nuages</a></li>
            <li><a href="#part2-5.4.5">5.4.5 Le phénomène de concentration</a></li>
            <li><a href="#part2-5.4.6">5.4.6 <i lang="en" xml:lang="en" class="droit">Openness</i></a></li>
            <li><a href="#part2-5.4.7">5.4.7 <i lang="en" xml:lang="en">Open technology</i>, logiciel libre et <i lang="en" xml:lang="en" class="droit">open hardware</i></a></li>
            <li><a href="#part2-5.4.8">5.4.8 <i lang="en" xml:lang="en">Open standard</i>, l’<i lang="en" xml:lang="en">openness</i> appliquée à la standardisation</a></li>
            <li><a href="#part2-5.4.9">5.4.9 Les modèles économiques du logiciel libre aujourd’hui ?</a></li>
          </ol>
        </li>
        <li><a href="#part2-5.5">5.5 Conclusion</a></li>
      </ol>
    </nav>

    <blockquote class="epub-epigraph" epub:type="bodymatter epigraph">
      <p>Un logiciel libre est gratuit une fois qu’il a été payé</p>
      <footer><cite>François <span class="auteur">Élie</span></cite></footer>
    </blockquote>

    <p> Le mouvement du logiciel libre représente actuellement environ six cent mille projets et plus de cent millions de développeurs. Plus de la moitié des solutions et des infrastructures installées par les entreprises dans les cinq ans à venir seront basées sur du logiciel libre. 2011 a été une année record pour les investissements dans ce domaine avec une augmentation de 49% pour atteindre 675 millions de dollars. Les nouvelles entreprises de logiciel s’appuient de plus en plus sur le logiciel libre qui leur permet de générer du chiffre d’affaires avec des modèles économiques adaptés. </p>
    <p> Ces chiffres et projections issus d’études récentes réalisées par <i lang="en" xml:lang="en" class="droit">Blackduck Software (<cite>6th Annual Future of Open Source Survey</cite></i>) donnent une idée de l’ampleur du mouvement du libre qui est aujourd’hui bien installé dans le paysage économique. Ce chapitre apporte des réponses à la désormais classique question de savoir comment générer du chiffre d’affaires et des revenus à partir de logiciels qui sont ouverts et gratuits. </p>
    <p> À l’instar du réseau routier dont la fonction première est de faciliter les déplacements des usagers indépendamment de leurs activités, les logiciels libres sont indépendants des modèles économiques liés à leur utilisation. Une conséquence importante est que le mouvement du logiciel libre offre deux types de retour sur investissement : le premier répond au modèle de l’édition logicielle (amortissement des coûts de développement) et l’autre, moins facile à quantifier, intervient à travers l’impact sociétal produit, qui peut être parfois considérable (par exemple Internet). </p>
    <p> Dans ce chapitre nous présenterons, en adoptant une perspective historique, le concept d’<i lang="en" xml:lang="en">openness</i> et les différents modèles économiques associés au logiciel libre : services, mutualisation, valeur ajoutée, double licence, fondation. Seront également évoqués des modèles basés sur le matériel, le <i lang="en" xml:lang="en">cloud</i>, l’assemblage de composants et les terminaux mobiles. Avant d’aborder ces questions nous rappellerons quelques concepts clés. </p>
    <dl class="liste-paragraphe">
      <dt> Qu’est-ce qu’un modèle économique ?</dt>
      <dd> Pour en donner une définition très succincte, un modèle économique est une description des mécanismes de génération de revenus, que ce soit pour des personnes physiques (artisans, etc.) ou morales (entreprises, collectivités, etc.). Les modèles économiques sont aussi vieux que la société : le marchand itinérant qui augmente la valeur perçue de ses produits en les déplaçant d’un point à un autre, la place du marché où les commerçants produisent mutuellement de la valeur en concentrant des produits, donc du choix, dans le temps et dans l’espace, l’échoppe de quartier qui offre un point d’approvisionnement stable pour les produits courants, le travail à façon qui mobilise les compétences spécifiques de l’artisan, etc. Les modèles économiques rencontrés dans le monde du logiciel libre sont liés à une gestion de la propriété intellectuelle spécifique puisque le principe des licences du logiciel libre consiste en un abandon contrôlé, parfois imposé, des droits patrimoniaux des auteurs. </dd>
      <dt> La non rivalité et l’<i lang="en" xml:lang="en">openness</i>.</dt>
      <dd> Le logiciel libre est fondé sur deux principes essentiels : la « non rivalité » et l’<i lang="en" xml:lang="en">openness</i>. Un bien est dit « non rival » lorsqu’il peut être transmis sans dépossession, comme la connaissance. Les logiciels appartiennent aussi à cette catégorie : on peut copier et transmettre un logiciel autant de fois que l’on veut tout en continuant à s’en servir soi-même. Le concept d’ouverture ou <i lang="en" xml:lang="en">openness</i> peut être défini comme l’attitude consistant à systématiser la diffusion et le partage des biens non rivaux. Ce type de comportement, dont l’exemple le plus emblématique est celui de la recherche scientifique, accélère considérablement la production et la diffusion des connaissances et augmente significativement l’innovation. La réponse que fournit l’<i lang="en" xml:lang="en">openness</i> à la question du mode de financement s’appelle <em>écosystème</em> et nous verrons que les implications de cette réponse excèdent largement le seul financement du développement du logiciel. </dd>
      <dt> Le prix, le coût et la valeur perçue.</dt>
      <dd> Tout modèle économique fait intervenir au moins trois grandeurs fondamentales. Le prix d’un produit ou d’un service qui est déterminé par un vendeur en fonction d’un contexte de marché, c’est le prix « affiché sur l’étiquette ». Le coût d’un produit ou service qui correspond à la somme des ressources nécessaires à celui qui le fabrique ou l’élabore pour le produire ou le fournir. La valeur perçue d’un produit ou service est l’évaluation par un acteur donné de l’intérêt que présente pour lui l’acquisition de ce produit ou ce service. Le prix résulte donc d’une décision, le coût d’une analyse et la valeur perçue d’une évaluation. Ces trois variables sont relatives, elles dépendent de chaque acteur et déterminent des indicateurs (ex. marge ou perte) et des comportements (ex. décision d’achat ou non). La nature des articulations entre ces trois grandeurs et leur organisation dans le temps et dans l’espace sont caractéristiques d’un modèle économique. </dd>
      <dt> Réseau routier, Internet et logiciel libre.</dt>
      <dd> La fonction d’un réseau routier est de faciliter la circulation, quel que soit le type des véhicules qui l’empruntent (vélo, voiture, bus, camion, etc.), et indépendamment de la nature de l’activité (trajet privé pour se rendre à l’école ou au travail, trajet professionnel, transport en commun, de fret, etc.). Partant de ce constat on peut imaginer de modéliser le réseau routier, les véhicules qui l’empruntent et la nature des déplacements, en une série de « classes » d’éléments. Le réseau routier est une instance d’une classe « infrastructures » contenant toutes sortes de réseaux : le réseau Internet, d’électricité, réseau ferré, etc. De la même façon on peut considérer une classe « types de véhicules routiers » contenant une collection de dispositifs adaptés à la circulation sur l’instance « réseau routier ». Une classe « applications » contiendrait des instances de type « service de transport de personnes », « déplacement individuel privé », etc. On peut envisager une classe « types de protocoles » de l’infrastructure « Internet » qui correspondrait à la classe « type de véhicules » de l’infrastructure « réseau routier ». Il est également possible de dessiner une séparation entre les classes de niveau inférieur qui concernent l’infrastructure et celles de niveau supérieur concernant son utilisation. L’extension de cette analogie au domaine du logiciel permet de constater que le logiciel libre se situe souvent au niveau structurel : il est le composant essentiel de l’infrastructure « Internet » (dont la description de ses protocoles, les « véhicules » qui y circulent) et concerne la majeure partie des briques de base des systèmes d’information constituant le web (GNU/Linux, Apache, MySQL, <abbr>PHP</abbr>, etc.). </dd>
    </dl>
    <p> Il apparaît que les acteurs qui contribuent aux infrastructures et ceux qui contribuent aux applications ne sont pas les mêmes. Les premiers sont généralement des institutions de recherche, des universités dont l’objectif initial n’est pas de réaliser des profits financiers immédiats mais de faire progresser les connaissances de manière collaborative, ouverte et mutualisée en créant des infrastructures à disposition de la société tout entière et sur lesquelles le secteur privé peut s’appuyer notamment pour exercer des activités commerciales. Cette complémentarité des modèles, à laquelle nous devons notamment Internet et le Web, est d’une remarquable efficacité puisque l’on estime aujourd’hui à 3 500 milliards de dollars le chiffre d’affaires généré notamment par les 113 millions de sites web actifs sur l’infrastructure Internet <a epub:type="noteref" href="#note_1" id="ref_1"> <sup>[1]</sup></a>. </p>
    <p> L’évocation de ces chiffres astronomiques est l’occasion de remarquer qu’une approche financière directe est extrêmement réductrice car elle est incapable de mesurer d’autres effets comme les interactions entre personnes ou la formation et la diffusion des connaissances, ou encore la circulation de l’information, qui sont pourtant des facteurs clés pour l’innovation. Le parcours historique qui suit va nous permettre de présenter les moyens qu’ont trouvés les acteurs du logiciel libre pour générer de la valeur. </p>

    <section epub:type="bodymatter subchapter">
      <h3 id="part2-5.1">5.1 Années 1960 et 1970, les débuts de l’informatique : des modèles économiques basés sur le matériel</h3>
      <p> Durant les décennies de 1960 et 1970, le marché percevait la valeur de l’informatique comme étant concentrée dans le matériel <a epub:type="noteref" href="#note_2" id="ref_2"> <sup>[2]</sup></a>. Les logiciels constituaient un complément nécessaire permettant de rendre les ordinateurs utilisables. Les systèmes d’exploitation, destinés à animer les machines, et les utilitaires, étaient considérés comme secondaires : leur finalité était de permettre aux constructeurs de valoriser leur offre matérielle. Les logiciels alors financés par les constructeurs d’ordinateurs étaient fournis avec les machines. De ce fait, les programmeurs étaient libres de mutualiser et d’échanger leurs codes. Ce fut le temps des premiers hackers et le développement logiciel s’inspirait du modèle de la recherche basé sur l’ouverture, le partage et la réutilisation. Les questions liées à l’appartenance, à l’encadrement de leur utilisation, à leur modification ou leur diffusion n’étaient pas à l’ordre du jour. Cette situation a perduré tant que les revenus des constructeurs d’ordinateurs se sont limités à la vente d’équipements matériels spécifiques. Cependant, avec l’évolution et la complexification des machines, les coûts de développement augmentèrent et les programmes livrés par les constructeurs dans des versions minimales ne satisfirent plus tous les utilisateurs. Les grands laboratoires de recherche et les universités commencèrent alors à développer des logiciels pour mieux répondre à leurs besoins, enrichissant ainsi l’offre des constructeurs de codes plus complets, plus performants et qui circulaient librement. Un exemple emblématique est le système d’exploitation Unix, développé par les laboratoires Bell à la fin des années soixante et commercialisé à partir de 1975. Caractérisé par sa portabilité – il ne dépendait pas d’un constructeur – et par sa structure modulaire, Unix se diffusa rapidement dans le monde universitaire. L’université de Californie à Berkeley qui disposait des codes sources fit évoluer le système en adoptant un modèle collaboratif de développement qui préfigurait l’organisation des communautés <i lang="en" xml:lang="en">open source</i>. Cette initiative fut à l’origine de la première distribution Unix, la <i lang="en" xml:lang="en" class="droit">Berkeley Software Distribution</i> ou <abbr>BSD</abbr>. L’association de <abbr>BSD</abbr> et des ordinateurs VAX de Digital Equipment, souvent mis à disposition des laboratoires universitaires par ce constructeur, en ont fait le premier système informatique de référence dans le milieu académique. Un détail d’importance pour la suite fut l’adjonction par les développeurs de Berkeley du support de <abbr>TCP/IP</abbr> dans <abbr>BSD</abbr>, faisant ainsi de chaque ordinateur VAX installé une machine « <i lang="en" xml:lang="en">Internet ready</i> » près d’une décennie avant l’adoption d’Internet par le grand public. Un autre point à noter est la grande attention portée à la qualité du manuel d’utilisation d’Unix dont le format standardisé respectait des règles extrêmement strictes. Ce soin porté à la rédaction du manuel est souvent cité comme l’un des facteurs clés de succès d’Unix. </p>
      <p> À cette époque Richard Stallman, chercheur au <abbr lang="en" xml:lang="en">MIT</abbr> et spécialiste de la programmation, des langages et des systèmes d’exploitation, commença à réfléchir à la création d’une licence garantissant le libre usage des logiciels, la libre accessibilité de leur code et réservant aux utilisateurs la possibilité d’étudier, de modifier, d’améliorer et de redistribuer les codes modifiés. Stallman annonça également son ambition de créer un système Unix dont tous les composants seraient libres. Plusieurs de ses collègues soutinrent cette initiative et en 1976 le groupe diffusa le premier éditeur libre Emacs, puis un an plus tard le gestionnaire de dépendances Make, suivi d’un débogueur puis d’autres outils. Le groupe fut rejoint par un nombre croissant de programmeurs à travers le monde <a epub:type="noteref" href="#note_3" id="ref_3"> <sup>[3]</sup></a>. La dissémination d’Unix et la standardisation de l’informatique professionnelle provoquèrent un foisonnement de petites entreprises spécialisées dans le développement d’applications spécifiques et d’édition de logiciels standards. Cela constitua le point de départ du développement d’un nouveau secteur économique d’autant plus prometteur que l’évolution rapide de la taille du parc de machines laissait entrevoir un marché potentiellement gigantesque. </p>
      <p> En somme, les modèles économiques des décennies 1960 et 1970 (et un peu au-delà) se sont construits autour du système Unix. C’était le règne du matériel et la période des architectures client/serveur. La source principale de revenus des constructeurs informatiques était la vente d’équipements matériels, le logiciel étant « offert »… </p>
    </section>

    <section epub:type="bodymatter subchapter">
      <h3 id="part2-5.2">5.2 Années 1980, l’époque des pionniers du Libre</h3>
      <p> Au début des années 1980 le système d’exploitation Unix de Bell Labs dominait largement le marché américain. On dénombrait 400 installations de systèmes Unix dans les universités en 1982 (contre 3 en 1979) et ce chiffre n’a cessé d’augmenter pendant les décennies 1980 et 1990. La plupart des étudiants qui travaillaient et développaient sur ce type de système utilisaient les outils « libres » avant de partir travailler en entreprise où ils trouvaient – ou mettaient en place – les mêmes environnements <a epub:type="noteref" href="#note_4" id="ref_4"> <sup>[4]</sup></a>. La licence du système Unix, qui accorde le droit d’utiliser le système, était achetée à Bell à un prix modeste mais, une fois cette formalité remplie, la plupart des utilisateurs installait <abbr>BSD</abbr>, la distribution universitaire du système qui rassemblait tous les utilitaires libres. La diffusion de ces logiciels empruntait un nouveau vecteur : Usenet, un réseau communautaire d’échange de messages, de programmes, de support, entre des centaines de programmeurs. Le déploiement d’Usenet, favorisé par le support de <abbr>TCP/IP</abbr> par la plupart des machines sous Unix, généralisa la diffusion des programmes par voie numérique et en même temps installa l’idée qu’un logiciel est naturellement et légitimement libre. L’architecture de Usenet était non centralisée, le réseau diffusant les contenus de proche en proche sur les réseaux des universités mais également entre universités. Ce furent les prémices d’Internet. En 1980 à Berkeley une passerelle fut établie entre le réseau ARPANET, qui reliait l’ensemble des établissements en contrat avec le Département de la Défense, et Usenet. En 1985 les messages Usenet adoptèrent le format <abbr>NNTP</abbr> qui s’imposa comme le standard de la transmission de <i lang="en" xml:lang="en">news</i>, ce qu’il est encore aujourd’hui <a epub:type="noteref" href="#note_5" id="ref_5"> <sup>[5]</sup></a>. </p>
      <p> En 1983 la position dominante de AT&amp;T entraîna le découpage des Bell Labs en une série de petites compagnies privées autonomes et le système d’exploitation Unix devint un produit commercial comme un autre. Les universités furent alors confrontées à un problème inattendu : elles durent désormais payer leurs licences Unix bien plus cher qu’auparavant <a epub:type="noteref" href="#note_6" id="ref_6"> <sup>[6]</sup></a> pour pouvoir utiliser le système. La réaction des universitaires ne tarda pas et en 1984, Richard Stallman lança le projet GNU avec l’objectif de développer de manière collaborative un système d’exploitation équivalent à Unix qui serait libre, gratuit et modifiable <a epub:type="noteref" href="#note_7" id="ref_7"> <sup>[7]</sup></a>. </p>
      <p> Un an plus tard, Stallman créa la <i lang="en" xml:lang="en" class="droit">Free Software Foundation</i> (<abbr>FSF</abbr>) afin de garantir l’ouverture des codes publiés dans le cadre du projet GNU et de les garantir contre le risque d’une appropriation. La <abbr>FSF</abbr> énonça les quatre libertés du logiciel libre : liberté d’exécuter le programme pour tous les usages, liberté d’étudier le fonctionnement du programme à travers son code source et de l’adapter, liberté de distribuer des copies, liberté d’améliorer le programme et de le rediffuser accompagné de son code source. </p>
      <p> Quelques années auparavant <abbr>IBM</abbr> avait sous-traité le système d’exploitation de sa nouvelle gamme de micro-ordinateurs <abbr>IBM PC</abbr> à Microsoft. Le grand succès de cette machine généra d’importants revenus pour Microsoft et l’entreprise se lança dans l’écriture d’une couche d’interface graphique destinée à concurrencer le nouveau produit d’Apple, le Macintosh, qui était muni d’une interface graphique fenêtrée avec des icônes et un dispositif de pointage intégré. Les métiers de ces deux entreprises étaient très différents et ces dernières ont déployé des stratégies différentes. Apple, qui amortissait le développement du système d’exploitation de sa machine en intégrant son coût dans le prix de vente de ses micro-ordinateurs, suivait le modèle économique historique de l’informatique en fournissant le système d’exploitation en même temps qu’elle vendait l’ordinateur, donnant ainsi aux clients l’impression que le logiciel système était gratuit. Microsoft, qui ne vendait pas de matériel mais seulement des logiciels qui pouvaient être dupliqués par simple copie, fut alors confronté à un problème inédit. La stratégie de l’éditeur consista à passer des accords avec les constructeurs de matériel afin que son système d’exploitation soit pré-installé sur les machines commercialisées <a epub:type="noteref" href="#note_8" id="ref_8"> <sup>[8]</sup></a> soumettant l’utilisation des ces dernières à l’acceptation d’un « contrat de licence d’utilisateur final » (ou CLUF, en anglais « <i lang="en" xml:lang="en">end-user license agreement</i> », EULA). Ce contrat limitait considérablement les droits de l’utilisateur du système en lui imposant une longue série d’interdictions, notamment de revendre sa licence, de réinstaller le logiciel sur une autre machine ou d’en utiliser des copies sur plusieurs machines. Cette pré-installation généralisée des systèmes d’exploitation de Microsoft sur les micro-ordinateurs constitua une barrière à l’entrée efficace qui a longtemps entravé la diffusion de systèmes d’exploitation alternatifs, ce malgré leur disponibilité (DR-DOS, Concurrent CP/M86, MultiUsers Dos, FlexOS 286, etc.). </p>
      <p> Malgré la protection apportée par la <abbr>GPL</abbr> la communauté GNU peinait à développer le noyau qui lui aurait permis de disposer de son système d’exploitation libre. Pour autant, cela n’entrava pas une montée en puissance du développement de logiciels libres, et notamment des outils, durant toute la décennie. Les méthodes de développement collectif commencèrent à se formaliser, notamment grâce à l’arrivée d’Internet qui était de plus en plus utilisé pour échanger des données dans le milieu du développement logiciel : on apprenait à travailler à distance, à s’organiser, on développait des outils collaboratifs. </p>
      <p> En 1988, Digital Equipment Corporation réunit les grands constructeurs (<abbr>HP</abbr>, Bull, <abbr>IBM</abbr>, Nixdorf, Siemens, Apollo) autour de l’initiative <i lang="en" xml:lang="en" class="droit">Open Software Foundation</i> avec l’objectif d’assurer la standardisation d’Unix. <a epub:type="noteref" href="#note_9" id="ref_9"> <sup>[9]</sup></a> </p>
      <p> Cette volonté des principaux acteurs du monde Unix de travailler ensemble sur un projet de standardisation montre que dans ces grandes entreprises on considérait unanimement une collaboration entre concurrents comme étant favorable aux affaires. Après une longue période pendant laquelle les acteurs tentaient de se distinguer les uns des autres avec des solutions volontairement différenciées, la standardisation est apparue comme un atout. <a epub:type="noteref" href="#note_10" id="ref_10"> <sup>[10]</sup></a> </p>
      <p> <abbr>IBM</abbr> décida alors de développer AIX, sa version d’Unix, et <abbr>HP</abbr> la sienne, <abbr>HP</abbr>-UX. Au même moment l’<abbr>IEEE</abbr> spécifiait le standard d’API Posix pour tenter de rendre les différentes variantes d’Unix plus interopérables. On voit apparaître ici une séparation entre des couches basses (le système d’exploitation avec ses services de base) pour lesquelles les concurrents n’hésitaient pas à collaborer en mutualisant leurs efforts, et les couches supérieures (ergonomie, richesse fonctionnelle, etc.) qui constituaient le lieu de la concurrence commerciale. Les principes énoncés par la <abbr>FSF</abbr> et appliqués par le projet GNU donnèrent lieu en 1989 à la création de la <i lang="en" xml:lang="en" class="droit">General Public Licence</i> ou GNU <abbr>GPL</abbr> qui formalisa les droits et devoirs des créateurs et des utilisateurs du logiciel en défendant l’idée que l’utilisateur doit pouvoir contrôler les programmes et non le contraire. Ce recours à la dimension juridique pour encadrer l’utilisation du logiciel à travers une licence fut une étape déterminante pour le logiciel libre. </p>
      <p> Ainsi la décennie 1980 a vu émerger des solutions alternatives à Unix : Microsoft Windows et l’<abbr>IBM PC</abbr>, le Macintosh d’Apple et les prémices du logiciel libre (outils de développement GNU, etc.). Le modèle de vente liée (CLUF/EULA) et de vente d’ensembles représentait alors une part importante du marché. Le logiciel libre en était à ses débuts, la priorité des développeurs étant le développement de logiciels d’infrastructure et d’outils (réseau, <i lang="en" xml:lang="en">middleware</i>, bases de données, serveurs). Les solutions propriétaires furent progressivement remplacées par des logiciels libres dans un mouvement partant des infrastructures et orienté vers les couches applicatives. </p>
    </section>

    <section epub:type="bodymatter subchapter">
      <h3 id="part2-5.3">5.3 Années 1990, naissance de GNU/Linux : du logiciel libre à l’<i lang="en" xml:lang="en" class="droit">Open Source Initiative</i> (<abbr>OSI</abbr>)</h3>
      <p> L’un des évènements marquants du début de la décennie 1990 fut la naissance du World Wide Web, dont Tim Berners Lee, chercheur au CERN décida de libérer les logiciels : </p>
      <blockquote>
        <p> D’abord, il n’est pas évident que je serais devenu un homme très riche si j’avais fait breveter une chose ou deux, parce qu’il y a plein de petits projets hypertexte qui n’auraient pas décollés, dont une bonne partie à cause de l’existence d’un contrôle central. Si j’avais été la personne centrale auprès de laquelle vous auriez dû enregistrer chacun de vos clics, payer pour chacun de vos clics, ou enregistrer chacune de vos pages web alors j’aurais eu un <i lang="en" xml:lang="en">business model</i>. Mais aucun business n’aurait existé. Il n’y aurait pas eu de Web. À la place il y aurait eu plein de gens qui auraient créé plein de Webs incompatibles, ils auraient tenté de contourner mes brevets, donc ils auraient fait des systèmes qui n’auraient pas fonctionné de la même façon <a epub:type="noteref" href="#note_11" id="ref_11"> <sup>[11]</sup></a>.</p>
      </blockquote>
      <p> En février 1992, Linus Torvalds diffusa son noyau Linux sous licence <abbr>GPL</abbr>. Les développeurs affluèrent pour contribuer et dans le courant de l’année les premières distributions firent leur apparition. C’est à ce moment que furent créées les premières entreprises privées dont le modèle économique était basé sur le logiciel libre. La société Cygnus Solutions présentée comme pionnière en la matière proposa des services de support des outils de développement GNU. Michael Tiemann, fondateur de la société, a fait le pari qu’un marché existait désormais en s’inspirant du GNU Manifesto dans lequel Stallman suggérait que des activités de consulting et de services autour du logiciel libre pouvaient tout à fait permettre de gagner sa vie. Stallman partait du principe que le logiciel à code ouvert engendre un marché de services d’une qualité bien supérieure pour les clients que l’offre monopolistique associée aux logiciels propriétaires. Après s’être convaincu qu’il était possible de proposer des prestations avec une efficacité de deux à quatre fois supérieure à une prise en charge interne, et cela pour un coût de deux à quatre fois inférieur, Tiemann lista quelques questions clés permettant d’évaluer les chances de succès d’un modèle : </p>
      <ul>
        <li>estimer la valeur qu’il est possible de produire ; </li>
        <li>vérifier que le modèle passe à l’échelle ; </li>
        <li>préciser le niveau de problème que l’on est en mesure de traiter ; </li>
        <li>estimer le rythme d’innovation que le projet peut soutenir <a epub:type="noteref" href="#note_12" id="ref_12"> <sup>[12]</sup></a>.</li>
      </ul>
      <p> Au cours de la décennie 1990, les distributions GNU/Linux continuèrent à apparaître : la Debian en 1993, puis la Red Hat en 1994 <a epub:type="noteref" href="#note_13" id="ref_13"> <sup>[13]</sup></a>. Alors que la diffusion du logiciel libre se limitait jusque-là à des distributions de GNU/Linux intégrant des utilitaires système, des logiciels applicatifs apparurent : un projet de moteur de base de données libre MySQL, un SGBD présenté par ses concepteurs comme « simple, rapide et fiable » et le projet Apache <abbr>HTTPD</abbr>, un serveur <abbr>HTTP</abbr> modulaire supportant des sites web complexes. Contrairement à ses concurrents (Iplanet de Netscape et IIS de Microsoft) Apache était téléchargeable avec son code source. Il proposait au départ les mêmes fonctions que ses concurrents mais l’affluence des contributions de la communauté lui a rapidement apporté une richesse fonctionnelle et une fiabilité sans équivalent. Les entreprises et les FAI ayant bien compris l’intérêt à la fois technique et économique que représentait l’intégration de ce logiciel au sein des solutions Web qu’ils proposaient, Apache s’est imposé comme la brique standard pour la fourniture de services Web. L’omniprésence d’Apache a drainé de nombreux utilisateurs vers GNU/Linux et a contribué à faire reconnaître la qualité des logiciels applicatifs issus du mouvement du logiciel libre. </p>
      <p> En 1995, la massification d’Internet engendrant une forte demande de connexion, l’on assista à l’explosion du nombre de fournisseurs d’accès. Les entreprises commencèrent à prendre la mesure de l’importance de cette infrastructure nouvelle et de l’opportunité qu’elle représentait : il s’agissait d’un nouveau média de promotion et de vente pour leurs services et leurs produits. Elles construisirent leurs services en ligne sur la base du serveur Apache qui a largement contribué au décollage à la fois Web et du logiciel libre et accompagné la massification d’Internet. De ce fait il fut l’un des principaux vecteurs de l’e-commerce. </p>
      <p> Début 1997, Eric Raymond écrivit son fameux texte <cite>La cathédrale et le bazar</cite> dans lequel il proposait un modèle explicatif de l’efficacité du développement du logiciel libre et énonçait les raisons pour lesquelles il surpassait le modèle du logiciel propriétaire <a epub:type="noteref" href="#note_14" id="ref_14"> <sup>[14]</sup></a>. </p>
      <p> Les arguments de Raymond ont été régulièrement repris par les uns et les autres, parfois pour prendre des décisions majeures, comme Netscape qui, pour des raisons stratégiques, ouvrit le code source de son navigateur, donnant lieu à la création de la Mozilla Foundation dont le navigateur Internet, Firefox, est aujourd’hui le seul véritable concurrent d’Internet Explorer <a epub:type="noteref" href="#note_15" id="ref_15"> <sup>[15]</sup></a>. Le texte de Raymond, qui venait compléter l’approche philosophique de Stallman en présentant une perspective plus pragmatique, proposait un argumentaire indiquant aux entreprises ce qu’elles pouvaient gagner à intégrer le logiciel libre dans leur stratégie. La segmentation et la spécialisation des licences (Apache, <abbr lang="en" xml:lang="en">MIT</abbr>, <i lang="en" xml:lang="en" class="droit">Free<abbr>BSD</abbr></i>, etc.) ouvrirent de nouvelles possibilités aux entreprises. Durant cette évolution la licence commença à jouer un rôle d’articulation entre le logiciel et son potentiel économique et/ou de diffusion. Les années 1990 marquèrent aussi l’émergence de la communauté des développeurs en tant que composante essentielle d’un projet de logiciel libre et comme un facteur clé de son succès. Ross Gardler, responsable de la communauté des développeurs Apache <a epub:type="noteref" href="#note_16" id="ref_16"> <sup>[16]</sup></a>, utilise l’expression « <i lang="en" xml:lang="en">community over code</i> » pour illustrer la primauté de la qualité de la communauté sur celle du code. </p>
      <p> Comme le mouvement du logiciel libre prenait de l’ampleur, les libristes qui le portaient cherchèrent à en faire une activité qui puisse leur permettre d’en vivre pour s’y consacrer à plein temps. Les modèles qu’ils trouvèrent pour cela les amenèrent invariablement vers le marché des entreprises privées. Comme le mot <i lang="en" xml:lang="en">free</i> de <i lang="en" xml:lang="en">free software</i> paraissait inquiéter les investisseurs et les clients, un groupe d’acteurs du mouvement constitué de Michael Tiemann de Cygnus Solutions, Bruce Perrens de Debian, et Linus Torvalds décidèrent, avec l’aide d’Eric Raymond et de quelques autres, d’utiliser désormais la formule <i lang="en" xml:lang="en">open source software</i> ou logiciel à code source ouvert. Ce terme fut diffusé sur le Web en 1997 et l’année suivante, l’<i lang="en" xml:lang="en" class="droit">Open Source Initiative</i> (<abbr>OSI</abbr>) fut créée avec pour mission de sensibiliser le public et le secteur privé de l’importance et de l’intérêt du logiciel non propriétaire. </p>
      <p> À ce titre, la première distribution GNU/Linux française, Mandrake (qui deviendra plus tard Mandriva), fut créée en 1998. Le modèle économique adopté par Mandrakesoft, sa société éditrice, était celui de la distribution à valeur ajoutée : les souscripteurs recevaient un <abbr>CD</abbr> qui contenait plus de fonctions, par exemple une compilation de drivers beaucoup plus large que la version téléchargeable gratuitement, ainsi qu’un accès privilégié au support. </p>
      <p> En 1999, le succès d’Apache amena la communauté à créer une fondation, financée par des dons et la vente de produits dérivés, dont l’objectif était d’apporter un cadre légal aux projets qu’elle hébergeait. Uniquement basée sur le volontariat, elle défendait, en tant que personne morale, les contributeurs et les utilisateurs contre d’éventuelles poursuites liées à des questions de propriété intellectuelle. De plus, le noyau historique de la communauté s’employait à éviter les dérapages. « Même très impliqué, un développeur ne peut pas faire n’importe quoi, car tous les votes sont publics » expliquait Sylvain Wallez à ce propos, « il est donc très difficile d’abuser du système pour imposer une modification à des fins purement commerciales. » <a epub:type="noteref" href="#note_17" id="ref_17"> <sup>[17]</sup></a> </p>
      <p> À la fin de la décennie 1990, l’éditeur norvégien eZ Systems AS proposa eZ Publish, le premier système de gestion de contenu (<abbr>CMS</abbr> ou <i lang="en" xml:lang="en">content management system</i>). Il s’agissait d’un serveur permettant de publier facilement des contenus, ces derniers étant stockés dans une base de données. La conception des pages s’apparentait à une configuration et ne nécessitait aucune compétence particulière en <abbr>HTML</abbr>. L’originalité du logiciel résidait dans l’association d’un système d’exploitation GNU/Linux, d’un serveur Web Apache, d’une base de données MySQL et d’un service de création de contenu basé sur le langage de script <abbr>PHP</abbr>. Cette architecture désormais appelée « LAMP » s’est ensuite imposée comme un standard, non seulement pour les <abbr>CMS</abbr>, mais aussi dans d’autres domaines : plates-formes collaboratives, e-commerce, etc. eZ Systems AS proposait son logiciel en deux versions, une sous licence <abbr>GPL</abbr> et une propriétaire avec un abonnement. Dans le premier cas, le support était obtenu auprès de la communauté et dans le second il était fourni par la société. <a epub:type="noteref" href="#note_18" id="ref_18"> <sup>[18]</sup></a> </p>
      <p> Un exemple illustratif de la professionnalisation de l’<i lang="en" xml:lang="en">open source</i> est celui de la société Digium créée en 1999 pour profiter de l’arrivée de la voix sur IP (VoIP) en proposant des alternatives à très faible coût (l’objectif affiché était de proposer des solutions 80% moins chères que les prix habituellement pratiqués) sur le marché particulièrement fermé de l’autocommutateur téléphonique (PABX). La stratégie adoptée pour cela par Digium fut d’initier un projet d’autocommutateur bénéficiant de la banalisation des ordinateurs personnels, des distributions GNU/Linux - alors en tête des systèmes d’exploitation de serveurs - et du modèle de développement <i lang="en" xml:lang="en">open source</i>. La société s’est aussi engagée dans le développement et la production d’interfaces de téléphonie permettant le raccordement des autocommutateurs à base de PC sur les réseaux de téléphonie existants (<abbr>RTC</abbr>, RNIS alias ISDN). </p>
      <p> Digium sponsorise et anime la communauté des développeurs et des utilisateurs du système de téléphonie <i lang="en" xml:lang="en">open source Asterisk</i>. Son modèle se base sur une offre de solution avec laquelle elle se positionne à la fois sur le volet logiciel (PABX logiciel, drivers, etc. publiés sous licence <abbr>GPL</abbr>), sur le volet matériel (gamme de cartes et de boîtiers d’interfaçage analogique et numérique, postes téléphoniques, solutions complètes, etc.) et sur le volet service (intégration, configuration, support, <i lang="en" xml:lang="en">consulting</i>, etc.). Asterisk est désormais la référence dans le domaine des PABX <i lang="en" xml:lang="en">open source</i> et il couvre une gamme complète d’équipements et une large cible d’utilisateurs. Sa communauté est la plus importante et la plus active dans le domaine de la VoIP (elle compte plus de 8 000 développeurs actifs, les forums Asterisk couvrent 35 000 sujets traités et comptent plus de 120 000 <i lang="en" xml:lang="en">posts</i>, et les solutions sont déployées dans 170 pays). Souvent mise à l’honneur par des revues, des salons et des groupements professionnels, Digium a réalisé un parcours exemplaire : une entreprise lance un projet de logiciel libre qui apporte une réponse à un problème largement partagé (un PABX générique robuste sans risque d’appropriation grâce à une licence <abbr>GPL</abbr>) et, grâce à une gouvernance éclairée et à des choix pertinents, elle fait d’Asterisk un logiciel de référence <a epub:type="noteref" href="#note_19" id="ref_19"> <sup>[19]</sup></a>. Cela a permis l’émergence d’un écosystème de plus en plus riche dans lequel l’entreprise trouve des sources de revenus en vendant du service, du matériel et des solutions complètes. Les responsables de Digium avaient une vision claire du modèle « infrastructure / applications » et de l’intérêt qu’il était possible de tirer de la publication d’un code en <abbr>GPL</abbr> pour initier une communauté très impliquée autour d’un code non appropriable. Aujourd’hui l’entreprise pratique son cœur de métier sur les marchés ouverts par l’écosystème qui s’étend de plus en plus largement. Ainsi on assistait en 2012 à l’arrivée dans l’écosystème d’un acteur proposant une solution <i lang="en" xml:lang="en">openhardware</i> (XiVO IPBX) dédiée aux télécommunications et capable de traiter plus de mille communications simultanées. </p>
      <p> Comme nous venons de le voir les années 1990 amenèrent leur lot d’innovation avec le serveur web Apache qui a contribué à donner une image positive au logiciel libre et permis à de nombreux FAI de disposer à moindre coût d’une offre de services autour du Web. Internet est devenu un réseau de communication de masse et l’e-commerce a fait son apparition. La nouvelle terminologie <i lang="en" xml:lang="en">open source</i> a donné au mouvement une crédibilité auprès des acteurs industriels. </p>
    </section>

    <section epub:type="bodymatter subchapter">
      <h3 id="part2-5.4">5.4 Première décennie 2000, professionnalisation de l’<i lang="en" xml:lang="en">open source</i> et structuration d’un nouveau secteur économique</h3>
      <p> Le début des années 2000 fut un moment clé pour le logiciel libre. L’on assista à une forte professionnalisation du mouvement et l’on vit le logiciel libre qui, après avoir investi le domaine des infrastructures (par ex. GNU/Linux, Sendmail, Apache), se diriger vers les couches applicatives en investissant successivement les bases de données (par ex. PostgreSQL, MySQL), le <i lang="en" xml:lang="en">middleware</i> (par ex. Jboss), les langages de développement web de services riches (par ex. <abbr>PHP</abbr>) et les couches applicatives (par ex. Ez Systems, Drupal, etc.). </p>
      <p> Un cas emblématique de cette tendance est la lame de fond de l’architecture LAMP qui, partant d’une combinaison de quatre logiciels très différents, mais présents dans toutes les distributions, devint la plate-forme standard pour le développement d’applications web <a epub:type="noteref" href="#note_20" id="ref_20"> <sup>[20]</sup></a>. </p>
      <p> Cette époque marqua également l’arrivée sur le marché d’entreprises d’un type nouveau : les SS2L ou sociétés de service en logiciel libre. Généralement ces entreprises n’éditent pas de logiciels libres mais elles contribuent activement à des projets, font des développements complémentaires et de l’intégration et vendent des services à des clients utilisateurs (les différents rapports de la Linux Foundation indiquent que le développement des mises à jour du noyau est assuré par une majorité croissante d’entreprises). La société Linagora est un exemple de SS2L qui s’est lancée en 2000 avec des conventions de formation pour l’armée de l’air et un contrat de développement d’un logiciel avec la mairie de Besançon. </p>
      <p> En 2000, MySQL AB troqua la licence <abbr>LGPL</abbr> utilisée dans sa base de code pour la licence <abbr>GPL</abbr>. Ce changement eut un fort impact tant au niveau communautaire que financier. Le choix de la licence <abbr>GPL</abbr> a pour effet de débrider la collaboration et de contrôler la concurrence (les concurrents qui téléchargent un logiciel sous licence <abbr>GPL</abbr> ne peuvent l’améliorer et en tirer des profits sans restituer ces améliorations à la communauté). La même année vit la création de la société Jboss, un <i lang="en" xml:lang="en">middleware</i>, Java, j2EE qui devint extrêmement populaire chez les développeurs d’applications web. </p>
      <p> 2001 fut l’année de naissance du <abbr>CMS</abbr> Drupal développé par des étudiants en fin d’études qui décidèrent de se lancer sur un projet de gestion de contenu web, simple, modulaire et accessible à des non informaticiens. Au bout d’un an, le projet Drupal fut publié sur la toile où il se diffusa rapidement. La société Acqua fut créée pour vendre des services autour de Drupal alors proposé en deux versions, la première étant disponible pour la communauté (gratuite, code source ouvert) et la seconde payante, mais proposant les dernières fonctionnalités. L’originalité du mécanisme de licence réside dans le fait que la version payante est transférée à la communauté dix-huit mois après sa publication <a epub:type="noteref" href="#note_21" id="ref_21"> <sup>[21]</sup></a>. </p>
      <p> À cette époque <cite lang="en" xml:lang="en">Forbes magazine</cite> annonçait près de douze millions d’utilisateurs pour GNU/Linux qui devint le deuxième système d’exploitation sur le marché des serveurs avec 27% du marché derrière Windows (41%). Apache possédait pour sa part 51% du marché des serveurs web. </p>
      <p> En 2002, près de 60% des développeurs déclaraient vouloir réaliser des applications pour GNU/Linux dans l’année suivante, et le taux de pénétration de ce système d’exploitation dans les entreprises japonaises bondissait de 35 à 65% en un an. C’est à ce moment que fut créée la fondation ObjectWeb. Son objectif était de proposer des composants <i lang="en" xml:lang="en">open source</i> dans les couches intergiciels. Cette même année vit la naissance de l’association Adullact dont la mission était d’identifier et d’exprimer les besoins des collectivités territoriales, administrations, centres hospitaliers, etc. « afin de mutualiser et maintenir un patrimoine commun de logiciels libres utiles aux missions de services publics » (selon le site web d’Adullact) <a epub:type="noteref" href="#note_22" id="ref_22"> <sup>[22]</sup></a>. Cette approche du logiciel libre à l’initiative d’une fédération utilisateurs/clients était nouvelle et présentait un double intérêt : elle permettait de générer d’importantes économies par mutualisation – on y reconnaît l’effet de levier propre à l’<i lang="en" xml:lang="en">open source</i> – et constituait en même temps, de manière cumulative, un patrimoine disponible pour toute la communauté d’utilisateurs <a epub:type="noteref" href="#note_23" id="ref_23"> <sup>[23]</sup></a>. </p>
      <p> Hewlett Packard disposant d’un gros vivier de partenaires vit également dans le logiciel libre un gisement de revenus potentiels à exploiter. La firme construisit une offre de services de support autour de logiciels <i lang="en" xml:lang="en">open source</i> en proposant des solutions clefs en main comprenant des serveurs web, des bases de données et des outils <i lang="en" xml:lang="en">middleware</i> tels que Jboss (qui débuta en vendant la documentation de ses logiciels), cela sur des machines serveurs de la marque exploitées sous GNU/Linux. Des partenariats furent établis avec des sous-traitants pour proposer du support de niveau 1 et 2, le support de niveau 3 étant généralement confié à l’éditeur du logiciel supporté. </p>

      <h4 id="part2-5.4.1">5.4.1 Eclipse et son écosystème</h4>
      <p> On assista de plus en plus souvent au début des années 2000 à des stratégies de constitution d’écosystèmes. Alors que certaines structures comme la fondation Eclipse, orientées vers le développement, se focalisaient sur les processus et sur les <i lang="en" xml:lang="en">workflows</i> associés, d’autres comme Apache étaient plutôt tournées vers la création et le développement de leur communauté. Lorsqu’elles atteignaient une masse critique, les infrastructures issues de ces projets constituaient des environnements propices à l’émergence d’une économie de services : installation, formation, support, développements spécifiques, vente et maintenance de matériel, etc. L’ensemble constitué par le logiciel libre et le foisonnement de services proposés autour formaient un écosystème <a epub:type="noteref" href="#note_24" id="ref_24"> <sup>[24]</sup></a>. </p>
      <p> En Amérique du Nord au début de l’année 2004, plus d’un million de développeurs travaillaient sur des projets de logiciels libres, 67% des entreprises utilisaient des logiciels libres et MySQL progressait de 30% soit cinq fois plus rapidement que Microsoft SQL Server. Le concept d’écosystème, qui dans ce contexte prend tout son sens, jouait désormais un rôle déterminant à travers l’établissement et la consolidation de standards, la création d’un marché ouvert et concurrentiel, créant ainsi une stabilité très prisée par les acteurs industriels qui étaient incités à y participer en tant qu’utilisateurs et parfois également comme contributeurs. Les participants qui contribuaient à l’écosystème bénéficiaient d’un accès privilégié. </p>
      <p> La pérennité de ces écosystèmes a néanmoins un prix : celui d’une gouvernance adéquate pour gérer l’architecture de collaboration commune et maintenir l’adéquation de l’infrastructure, clé de l’écosystème, avec les attentes des acteurs. La communauté existante doit rester très impliquée et gagner de nouveaux membres pour augmenter l’effet de levier et faire évoluer l’infrastructure en termes de qualité et de fonctionnalités. Cette exigence d’évolution est souvent la raison qui justifie l’ouverture de code. Ce fut le cas de Java, ouvert par Sun Microsystems, de la fondation Eclipse, créée par <abbr>IBM</abbr> pour disposer d’une plate-forme de développement qui manquait dans l’environnement GNU/Linux, ou encore de Netscape pour garantir la stabilité des standards ouverts du Web qu’une situation hégémonique de Microsoft avec Internet Explorer aurait pu remettre en question. </p>
      <p> Publier un logiciel sous licence libre augmente sa diffusion, son utilisation et donc la taille du marché potentiel de services, d’équipements et de conseil dans l’écosystème qui s’est créé autour de ce logiciel. </p>
      <p> Les acteurs jouant un rôle prédominant dans un écosystème augmentent leur contrôle sur la concurrence. Ainsi la création de la fondation Eclipse par <abbr>IBM</abbr> avait également pour objectif, à travers la mise au point d’un environnement de développement à la fois performant et accessible, de favoriser l’utilisation d’équipements informatiques basés sur les architectures x86 en faisant croître la base de machines exploitées sous GNU/Linux et le parc d’applications, et d’entraver comme cela ses principaux concurrents (Microsoft, Sun Solaris). </p>
      <p> Cet écosystème a permis à <abbr>IBM</abbr> de créer une forte dynamique basée sur une plate-forme valorisée à plus de 40 millions de dollars et sur un large réseau d’entreprises. L’environnement Eclipse permet aux éditeurs de logiciel quelle que soit leur taille – mais aussi aux étudiants – de disposer d’un environnement au dernier état de l’art pour développer des applications pour GNU/Linux sous langage Java. <abbr>IBM</abbr> a gagné son pari puisque, avec plus de 10 000 téléchargements par jour, Eclipse s’est désormais imposé comme ce que les Anglais désignent sous le terme de <i lang="en" xml:lang="en">commodity</i>. Ce mot sans équivalent simple en français représente une matière première, un produit, une ressource générique dont le choix s’impose naturellement. </p>
      <p> Les écosystèmes peuvent s’apparenter à des marchés, permettant de dégager beaucoup de valeur lorsqu’ils sont ouverts mais souffrant des tentatives de contrôle, jusqu’à pouvoir disparaître. À un certain stade de son développement Eclipse a connu une crise : la volonté d’<abbr>IBM</abbr> de contrôler l’écosystème de manière directive a provoqué le départ de contributeurs qui avaient l’impression de ne plus être au service d’un projet d’infrastructure de développement ouverte mais de travailler pour servir les intérêts d’<abbr>IBM</abbr>. La stagnation de la communauté a poussé la fondation Eclipse à couper les ponts avec son sponsor historique et retrouver une certaine neutralité aux yeux des membres de la communauté qui, aussitôt le divorce consommé, a recommencé à prospérer <a epub:type="noteref" href="#note_25" id="ref_25"> <sup>[25]</sup></a>. Une situation similaire, et qui s’est mal terminée, est celle de Nokia qui, à force de trop vouloir le contrôler, a fini par tuer l’écosystème Symbian, et finalement le système d’exploitation Symbian lui-même. L’écosystème est un terrain qui offre de nombreuses opportunités, par exemple la société O’Reilly, créée en 1984, initialement tournée vers Unix, est aujourd’hui l’éditeur de référence de la littérature technique sur le logiciel libre. </p>

      <h4 id="part2-5.4.2">5.4.2 Les solutions d’entreprises</h4>
      <p> Les entreprises sont utilisatrices d’une grande variété de logiciels qui vont du <i lang="en" xml:lang="en">desktop</i> jusqu’à des applications industrielles et commerciales : ERP et <abbr>CRM</abbr> (<i lang="en" xml:lang="en">Entreprise Ressource Planning</i> et <i lang="en" xml:lang="en">Customer Relationship Management</i>) mais aussi <i lang="en" xml:lang="en">supply chain</i>, <i lang="en" xml:lang="en">KM knowledge management systems, GroupWare, e-learning</i>, etc. Les principaux acteurs de ce secteur sont <abbr>IBM</abbr>, BAAN, SAP et Oracle. </p>
      <p> La hauteur des enjeux, la nécessité d’adapter les solutions et les processus à l’organisation et aux spécificités des entreprises, l’exigence d’un support sans faille et les questions de responsabilité ont fait que les solutions propriétaires ont longtemps régné en maîtres dans ce domaine. Les contraintes strictes exigées par les industriels, notamment la question de l’identification des responsabilités, et le caractère stratégique de ces applications ont probablement retardé l’arrivée du logiciel libre sur ces marchés. Est-ce dû à une évolution des mentalités ou à une recherche d’économie, toujours est-il qu’au milieu de la décennie les solutions d’entreprises basées sur des logiciels libres ont commencé à faire leur apparition. Pour citer deux exemples populaires, <i lang="en" xml:lang="en" class="droit">Open</i> <abbr>ERP</abbr> est un logiciel intégré d’entreprise et <i lang="en" xml:lang="en" class="droit">Sugar<abbr>CRM</abbr></i> un logiciel de gestion de relation clients qui suit le modèle de double licence comme MySQL à ceci près que la version commerciale supporte des fonctions supplémentaires. Le logiciel libre, qui inquiétait de moins en moins les décideurs et qui présentait un avantage financier indéniable, a finalement eu raison de leurs réticences. Une étude de McKinsey a montré que la structure de coût d’installation d’une solution <abbr>ERP</abbr> ou <abbr>CRM</abbr> propriétaire est composée d’environ 30% pour la licence et de 70% pour le développement des adaptations. </p>
      <p> Au fil des ans les solutions d’entreprises basées sur des logiciels libres ont bénéficié de gros enrichissements fonctionnels et leur ergonomie a évolué significativement. <i lang="en" xml:lang="en" class="droit">Sugar<abbr>CRM</abbr></i> et <i lang="en" xml:lang="en" class="droit">Open</i> <abbr>ERP</abbr> ont chamboulé un secteur partagé entre les grands éditeurs informatiques. Cette adoption du logiciel libre par les entreprises a touché tous les composants du système d’information, ainsi une étude menée en février 2005 par Evans Data auprès de développeurs et d’administrateurs de bases de données montrait que 64% des <abbr>SGBD</abbr> installés en entreprise étaient <i lang="en" xml:lang="en">open source</i>. Fin 2005, une étude d’Optaros montrait que 87% des entreprises utilisaient des logiciels libres et BusinessWeek annonçait que le logiciel libre avait « franchi le seuil critique ». Ce phénomène est parfois évoqué comme la « rupture des digues » qui avaient un temps isolé les entreprises du mouvement du logiciel libre. </p>
      <p> Les <i lang="en" xml:lang="en">success-stories</i> que nous évoquons ici ne doivent pas faire oublier que tous les projets de logiciel libre ne sont pas des succès et d’autre part le fait que bien souvent la visibilité des projets intervient longtemps après leur lancement. On peut estimer cette durée de gestation à 7 ou 10 ans en moyenne. Bien souvent les initiateurs de ces projets les ont démarrés dans une chambre d’étudiant ou menés de front avec une autre activité professionnelle, ce parfois durant plusieurs années. On parle parfois de projets « lancés dans un garage ». Des projets comme MySQL, Nagios et même GNU/Make ou GNU/Emacs, ont suivi cette longue gestation. Il existe cependant des exceptions, comme le système de gestion électronique de documents Alfresco qui, lancé en 2005, a connu un succès quasi immédiat. Cette réussite très rapide peut s’expliquer de plusieurs façons. Le logiciel apportait une réponse à un besoin bien identifié car parfaitement connu du fondateur John Powell (cofondateur de Documentum), et permettait aux entreprises de réaliser d’importantes économies. Cependant un élément probablement déterminant fut de bénéficier d’un lancement de type <i lang="en" xml:lang="en">startup</i>. Cet exemple illustre l’importante mutation du logiciel libre qui dans la première décennie des années 2000 commence à brûler l’étape du garage pour passer directement par la banque. </p>

      <h4 id="part2-5.4.3">5.4.3 Quelques remarques sur le bazar</h4>
      <p> Le début des années 2000 a marqué le véritable démarrage du logiciel libre. Les créations d’entreprises se sont succédé et de nombreux projets de logiciels libres lancés quelques années auparavant sont parvenus à maturité et leur diffusion fut suffisamment large pour qu’apparaissent des écosystèmes de services, de conseil et de support dans toutes sortes de domaines. Ce mouvement s’accompagna d’une spécialisation (Apache pour l’infrastructure, OW2 pour les intergiciels, Eclipse pour le développement de code, Funambol pour le développement et déploiement d’application sur terminaux mobiles, etc.). Avec la montée en taille des projets, de plus en plus d’acteurs du logiciel libre recherchèrent un moyen de vivre de cette activité. On vit alors émerger de multiples modèles économiques basés sur (ou combinant) : </p>
      <ul>
        <li>une offre commerciale de services (<i lang="en" xml:lang="en">consulting</i>, support, formation, etc.) ; </li>
        <li>des logiciels à double licence (une version libre et une version commerciale) ; </li>
        <li>la vente de distributions à valeur ajoutée (distributions GNU/Linux packagées, testées, qualifiées) ; </li>
        <li>des logiciels à licence différée (la version courante est vendue, les versions antérieures sont libres et gratuites) ; </li>
        <li>une mutualisation (création d’un effet de levier afin de partager les coûts de développement d’un logiciel).</li>
      </ul>
      <p> Les entreprises qui se spécialisèrent dans la prestation de service autour des logiciels libres sans être nécessairement les auteurs du code (mais y contribuant souvent) furent baptisées sociétés de service en logiciels libres ou SS2L. </p>
      <p> La seconde moitié de la décennie 2000 vit l’émergence de projets de logiciels libres basés sur un <i lang="en" xml:lang="en">business plan</i>, à la façon de MySQL en son temps, mais en disposant dès le départ, avant même qu’une ligne de code ait été écrite, d’un budget d’investissement et de fonctionnement. En somme ce sont des <i lang="en" xml:lang="en">startup</i> de l’<i lang="en" xml:lang="en">open source</i> dont l’objectif est de lancer très rapidement le logiciel libre afin d’occuper le créneau et de créer un écosystème dont l’entreprise qui l’a lancé puisse tirer profit. </p>
      <p> Après avoir conquis les couches basses de l’informatique, le logiciel libre s’orienta vers les couches applicatives et vers les solutions d’entreprises (<abbr>ERP</abbr>, <abbr>CRM</abbr>, GED) ce mouvement s’accompagnant de la création de sociétés de service fournissant des prestations autour de logiciels libres. </p>
      <p> La multiplication des projets de logiciel libre fait que les métiers dans lesquels une solution de logiciel libre n’existe pas se font rares. </p>

      <h4 id="part2-5.4.4">5.4.4 Dans les nuages</h4>
      <p> On vit réapparaître des offres de services basées sur la technologie client-serveur en vogue durant les années 1960 à 1990 : les SaaS (<i lang="en" xml:lang="en">Service as a Software</i>), les IaaS (<i lang="en" xml:lang="en">Infrastructure as a Software</i>), les PaaS (<i lang="en" xml:lang="en">Platform as a Service</i>) et les DaaS (<i lang="en" xml:lang="en">Desktop as a Service</i>). La plupart de ces services étaient basés sur des briques <i lang="en" xml:lang="en">open source</i> et organisés sur le modèle des services en ligne. Si la solution semble claire pour le client qui paie pour obtenir un service, elle l’est moins pour l’éditeur du service dont les revenus sont générés en partie grâce à l’exploitation de logiciels libres développés par d’autres. </p>
      <p> L’extension du logiciel libre l’a amené à investir de nouveaux terrains de jeux, notamment les smartphones et les tablettes qui ont la particularité de constituer une plate-forme destinée à recevoir des logiciels propriétaires (<i lang="en" xml:lang="en">apps</i>). Ces appareils, livrés avec un système d’exploitation pré-installé, ont ré-adopté le modèle de vente d’un ensemble comme il était pratiqué dans les débuts de l’informatique. Apple a montré la voie des applications pour mobiles avec son AppStore, suivi par Google Play, le magasin d’applications de la plate-forme Android. Ce modèle s’apparente à celui du supermarché : le propriétaire de la plate-forme sélectionne les applications, les expose dans ses rayons et prélève une partie du montant des ventes. </p>
      <p> Les services en ligne sont également un moyen pour les éditeurs de logiciels libres de générer des revenus à travers des abonnements donnant accès à différents types de prestations (forges, stockage, etc.). Ainsi Ubuntu a intégré la fonction Ubuntu One. Il s’agit d’un logiciel donnant accès à un service de stockage en ligne. Deux gigaoctets sont fournis gratuitement et au-delà de cette capacité le service devient payant. Près de 40% des utilisateurs du système Ubuntu se sont ouvert un compte sur ce service (selon l’étude <i lang="en" xml:lang="en">Ubuntu user survey 2012</i>). Par ailleurs la fouille de données et la vente d’informations à destination d’applications marketing sont d’autres moyens, certes plus controversés, de générer des revenus complémentaires. </p>

      <h4 id="part2-5.4.5">5.4.5 Le phénomène de concentration</h4>
      <p> On assiste depuis quelques années à un mouvement de concentration dans le monde de l’édition de logiciels libres, les petits éditeurs étant absorbés par ceux de taille moyenne, eux-mêmes rachetés par les grands. Une illustration de cette tendance est le rachat de MySQL par Sun Microsystems ensuite racheté par Oracle. Cet exemple appelle plusieurs remarques. Tout d’abord, une opération de ce type a pour objectif essentiel la prise de contrôle d’un logiciel. Ensuite un tel rachat peut être extrêmement intéressant pour un acteur qui voit sa domination menacée par un nouvel entrant, surtout s’il s’agit d’un logiciel libre. Ensuite force est de constater que le rachat n’est réalisable qu’aux deux conditions suivantes : a) que le logiciel en question soit publié sous une licence de type copyleft faible ou copyright et b) qu’une entité dispose des droits sur le code par exemple par la signature d’une licence de contributeur (<i lang="en" xml:lang="en">Contributor License Agreement</i> ou CLA) prévoyant la cession de tous les droits des auteurs vers la structure ou bien par la mise en place de contrats de travail avec les contributeurs. Si cela n’est pas le cas – licence de type copyleft fort de type <abbr>GPL</abbr> – alors l’opération de prise de contrôle est impossible. On peut se demander où s’arrêtera ce mouvement de concentration et s’il a vraiment un sens. L’histoire des modèles économiques du logiciel libre montre que les velléités de fermeture ou de contrôle du code entravent la diffusion, brisent la confiance des contributeurs, affaiblissent l’écosystème et se révèlent finalement contre-productives. En évoquant la scission d’<i lang="en" xml:lang="en" class="droit">OpenOffice</i> et la création de LibreOffice, Philippe Scoffoni constate qu’il est de plus en plus évident qu’un logiciel libre ne peut pas être porté directement et éternellement par une entreprise, car « un logiciel libre est un bien commun et ne peut appartenir à personne » et que « à ce jour seules les associations et les fondations semblent en mesure de le garantir ». Il ajoute que « l’apport et la contribution des entreprises sont essentiels. » <a epub:type="noteref" href="#note_26" id="ref_26"> <sup>[26]</sup></a> </p>
      <p> Ces dernières contribuent en effet à l’écosystème en alimentant les marchés qui s’y développent et contribuent parfois activement au développement du code. Un autre type d’acteur est en mesure de renverser cette tendance à la concentration sans toujours en avoir conscience : il s’agit des contributeurs eux-mêmes qui constituent la cheville ouvrière du projet et peuvent refuser de contribuer à n’importe quelles conditions. </p>

      <h4 id="part2-5.4.6">5.4.6 <i lang="en" xml:lang="en" class="droit">Openness</i></h4>
      <p> Le concept d’<i lang="en" xml:lang="en">openness</i> n’est pas nouveau. Lors de ses recherches sur l’histoire des sciences, l’économiste Paul David l’a utilisé pour définir une caractéristique nouvelle et déterminante de la science à l’époque de la Renaissance. On constate qu’à partir du moment où la science devient ouverte, c’est-à-dire lorsque l’information commence à circuler, que les scientifiques interagissent, éditent et diffusent des résultats de leurs recherches, il se met en place une organisation qui vise un accroissement rapide des connaissances <a epub:type="noteref" href="#note_27" id="ref_27"> <sup>[27]</sup></a>. </p>
      <p> Ce que montre David à travers ses recherches sur l’<i lang="en" xml:lang="en">open science</i> est, si ce n’est le lien de causalité, au moins la coïncidence entre l’ouverture des normes et de la technologie, et l’accélération de la production de connaissances, générant de nouvelles normes et de nouvelles avancées technologiques, etc. La trajectoire de ce cercle vertueux déborde largement du milieu industriel vers la société qu’il irrigue de connaissances et de technologies qui se transforment en expérimentations, en inventions, en savoirs-faire et ultimement en une activité économique. </p>
      <p> Le modèle de « communauté de scientifiques » proposé par David renvoie aux « communautés de pratiques » qu’Étienne Wenger définit comme des groupes de personnes en interaction, rassemblées autour d’un même domaine et partageant des pratiques pour résoudre un problème partagé. Wenger a montré que l’une des spécificités de cette structure était de régler les problèmes en produisant des connaissances nouvelles et de les transférer dans la pratique, ce qui fait de la communauté un acteur essentiel de l’innovation. <a epub:type="noteref" href="#note_28" id="ref_28"> <sup>[28]</sup></a> </p>
      <p> Reprenant le modèle de David, les chercheurs Frédéric Foray et Liliane Hilaire-Perez ont mené des investigations historiques et montré comment au <abbr title="dix-huitième" class="chiffre-romain">xviii<sup>e</sup></abbr> siècle la ville de Lyon était parvenue, grâce à la mise en œuvre de ce que les auteurs qualifient d’<i lang="en" xml:lang="en">Open technology</i>, à remporter le bras de fer économique qui opposait Lyon à Londres dans la bataille de la soie. Cette confrontation économique est intervenue peu après l’adoption du système de brevet par l’Angleterre alors qu’il n’avait pas encore été adopté en France. Pour piloter l’innovation, la ville de Lyon avait mis en place un dispositif consistant organiser des réunions lors desquelles les inventeurs présentaient publiquement les améliorations pour les métiers à tisser <a epub:type="noteref" href="#note_29" id="ref_29"> <sup>[29]</sup></a>. Les industriels présents à ces séances étaient invités, s’ils adoptaient l’une des nouveautés sur leurs métiers à tisser, à indiquer la nature de la modification effectuée et le nombre de machines modifiées <a epub:type="noteref" href="#note_30" id="ref_30"> <sup>[30]</sup></a>. La ville tenait une comptabilité de l’adoption des innovations des différents inventeurs qui étaient récompensés financièrement par la ville <a epub:type="noteref" href="#note_31" id="ref_31"> <sup>[31]</sup></a>. Le fait que les inventeurs soient rémunérés par la collectivité et non par les industriels eux-mêmes montre que l’on avait parfaitement conscience à l’époque de ce que la boucle de retour sur investissement dépassait les seules communautés des inventeurs et des industriels pour concerner la société lyonnaise dans son ensemble <a epub:type="noteref" href="#note_32" id="ref_32"> <sup>[32]</sup></a>. Celle-ci était très impliquée dans les industries de la soie qui, à la fin du <abbr title="dix-huitième" class="chiffre-romain">xviii<sup>e</sup></abbr> siècle, employaient un quart des 143 000 habitants de la ville. </p>
      <blockquote>
        <p> À Londres l’individualisme, le secret et les brevets mirent un terme à la diffusion de l’innovation alors qu’à Lyon « les règlements locaux transférèrent directement les innovations majeures dans le domaine public de la manufacture ». <a epub:type="noteref" href="#note_33" id="ref_33"> <sup>[33]</sup></a></p>
      </blockquote>
      <p> Pour évaluer les récompenses accordées aux innovateurs, les autorités locales utilisaient des méthodes assez élaborées. Ainsi, par exemple, un certain Michel Berthet se vit récompensé de 1 000 livres françaises de l’époque. 600 lui furent versées pour la révélation de son invention et les 400 complémentaires après qu’il eut expliqué aux industriels comment la mettre en œuvre « et qu’elle ait été installée dans quatre autres fabriques que la sienne ». Les rémunérations ne récompensaient donc pas seulement l’utilité économique potentielle de l’invention mais elles étaient aussi « indexées sur les efforts de l’inventeur pour partager ses connaissances avec l’ensemble de la communauté ». Les résultats de cette politique de soutien à l’innovation furent remarquables : en 1814, Lyon et Londres disposaient d’outils de production de tailles comparables avec respectivement 14 500 et 12 000 métiers à tisser. En 1853, Londres n’en comptait plus que 5 000 alors que la ville de Lyon en exploitait 30 000 (60 000 en comptant les métiers de la banlieue). Ce succès fut durable puisqu’au début des années 1900 la production française avait beaucoup augmenté, la majeure partie étant exportée, alors que l’Angleterre était devenue un importateur net. </p>
      <p> Comment expliquer le succès lyonnais ? Foray et Perez considèrent que ce qui a servi Lyon et manqué à Londres fut une flexibilité de la production à destination de l’international, associée à une grande « mobilité organisationnelle » qui produisait une « économie de la variété » basée sur une mobilisation de ressources humaines et techniques, de compétences, de réputation et d’estime de soi <a epub:type="noteref" href="#note_34" id="ref_34"> <sup>[34]</sup></a>. Le modèle lyonnais était celui d’une production à la demande qui fournissait des échantillons, en attente des commandes des clients et capable de mobiliser en quelques jours cinq mille métiers à tisser pour livrer rapidement de grosses commandes imprévues <a epub:type="noteref" href="#note_35" id="ref_35"> <sup>[35]</sup></a>. Au contraire, l’industrie londonienne était devenue peu réactive et son modèle avait évolué vers la spéculation, l’anticipation et le stockage <a epub:type="noteref" href="#note_36" id="ref_36"> <sup>[36]</sup></a>. En outre, là où les acteurs lyonnais étaient en mesure de travailler avec plusieurs partenaires et d’en changer du jour au lendemain, les producteurs londoniens étaient généralement sous la domination des marchands qui leur faisaient des avances de trésorerie puis leur imposaient des contrats d’exclusivité <a epub:type="noteref" href="#note_37" id="ref_37"> <sup>[37]</sup></a>, les plaçant dans une situation d’endettement et de dépendance qui les dissuadaient d’envisager une modernisation de leur outil de production. </p>
      <p> Un autre point à souligner fut le rôle important que joua le tribunal des prud’hommes en imposant à tous les fabricants de métiers à tisser des standards sur la forme et les dimensions des composants, permettant l’interopérabilité des pièces détachées, l’augmentation de la polyvalence des mécaniciens et l’optimisation des coûts de maintenance et d’entretien des machines grâce à l’émergence d’un marché de la pièce détachée <a epub:type="noteref" href="#note_38" id="ref_38"> <sup>[38]</sup></a>. </p>

      <h4 id="part2-5.4.7">5.4.7 <i lang="en" xml:lang="en">Open technology</i>, logiciel libre et <i lang="en" xml:lang="en" class="droit">open hardware</i></h4>
      <p> Ce voyage dans le temps permet de porter un regard neuf sur le brevet et la propriété intellectuelle mais aussi de découvrir des similitudes parfois frappantes entre le modèle lyonnais de l’industrie de la soie et l’<i lang="en" xml:lang="en">open source</i> : les modèles sont similaires de même que les effets produits. On constate également que le modèle de l’<i lang="en" xml:lang="en">open hardware</i>, aujourd’hui en fort développement, existait déjà il y a plus d’un siècle. L’<i lang="en" xml:lang="en">open hardware</i> consiste à ouvrir les plans, schémas, principes et procédés de fabrication d’objets matériels, en adoptant des principes similaires à ceux du logiciel libre. On constate que l’analogie va loin puisque l’on trouvait déjà rassemblés à l’époque l’ensemble des facteurs clés de succès qui accompagnent la mise en œuvre de la philosophie de l’<i lang="en" xml:lang="en">openness</i> : libre circulation de la connaissance, liberté et gratuité d’usage des inventions par les utilisateurs, rémunération indirecte des contributeurs, mise à disposition de l’ensemble de la société d’une infrastructure libre et ouverte. L’<i lang="en" xml:lang="en">open hardware</i> concerne par définition des produits rivaux, toutefois ses modèles économiques ne sont pas totalement différents de ceux du logiciel libre puisqu’une partie des revenus provient des services (support, conseil, etc.). L’autre concerne par contre la vente de produits physiques. Dans le domaine de l’électronique par exemple, il s’agit de cartes à microcontrôleurs (par ex. Arduino, Raspberry Pi, etc.) vendues en réalisant une marge sur la fabrication et sur la distribution. Les revenus peuvent aussi provenir de produits dérivés (T-shirts, autocollants, figurines, etc.) à l’instar de ce que font les associations « libristes » qui vendent des goodies à l’occasion des conférences et des salons. La plupart des caractéristiques intéressantes du modèle du logiciel libre restent valides dans le cas de l’<i lang="en" xml:lang="en">open hardware</i> : existence d’un écosystème à partir duquel des marchés concurrentiels se développent, système d’entraide très efficace, très faible coût du matériel dont les plans et schémas sont ouverts, écosystèmes logiciels basés sur le libre, etc. Des communautés de l’électronique <i lang="en" xml:lang="en">open-hardware</i> très dynamiques se sont constituées autour de projets ou d’entreprises comme Arduino, Linaros, Raspberry pi, Diydrones et d’autres. En 2010, une étude conduite par la société Adafruit Industries a recensé treize entreprises de cette catégorie. Prises dans leur ensemble, elles représentaient un chiffre d’affaires cumulé de cinquante millions de dollars. Robert Viseur, chercheur en gestion de la co-création à l’Université de Mons, prévoit que le marché de l’<i lang="en" xml:lang="en">open hardware</i> devrait dépasser le milliard de dollars en 2015. On constate aujourd’hui que l’écosystème d’Arduino par exemple s’est considérablement diffusé et que les cartes d’interface, capteurs, actionneurs et autres accessoires peuvent se trouver sur eBay à des prix extrêmement bas. Par ailleurs, des magasins spécialisés se sont créés et fournissent du matériel et du support sur des forums très actifs (par exemple Sparkfun Electronics). La société Arduino réalise un chiffre d’affaires d’un million de dollars alors qu’elle a ouvert toute sa propriété intellectuelle, tant sur le matériel que sur le logiciel (la seule propriété qu’elle a conservé sont les droits portant sur sa marque), et qu’elle est entourée de concurrents. Finalement les effets économiques produits par l’écosystème qu’elle a initié compensent largement le contrôle qu’elle a abandonné en ouvrant son projet. </p>
      <p> Le logiciel libre est un phénomène cumulatif qui permet de produire des infrastructures définitivement disponibles pour la société. Cela ne remet en cause ni la pertinence ni l’intérêt du secteur privé du développement logiciel, bien au contraire : les outils libres pour tous permettent de développer plus vite des applications de meilleure qualité et plus facilement interopérables sans avoir à réécrire sans fin les mêmes fonctions. Dès lors qu’un logiciel libre apporte une réponse à un problème donné, il n’est pas nécessaire de re-développer cette fonction, il suffit de s’en servir. Compte tenu de son caractère non rival, vouloir la re-développer est inutile et contre-productif. Pour reprendre l’analogie évoquée plus haut, l’entrepreneur qui souhaite se lancer dans le transport de fret, qui commencerait à construire des routes entre les sites de ses clients, serait pris pour un déséquilibré. Le recours au réseau routier national – développé sur des fonds publics – lui permet de se concentrer sur son métier de la façon la plus efficace pour lui, à savoir mettre en place une organisation qui lui permettra d’exploiter au mieux sa flotte de véhicules. Cet exemple est transposable au logiciel libre et, de manière plus générale, à tous les biens non rivaux et/ou mutualisables. </p>

      <h4 id="part2-5.4.8">5.4.8 <i lang="en" xml:lang="en">Open standard</i>, l’<i lang="en" xml:lang="en">openness</i> appliquée à la standardisation</h4>
      <p> La montée d’Internet a également provoqué d’importantes modifications dans le domaine de la standardisation avec l’arrivée des standards ouverts notamment grâce à l’<abbr>IETF</abbr> (<i lang="en" xml:lang="en">Internet Engineering Task Force</i>). Ce groupe de travail qui publiait des spécifications ouvertes concernant les technologies d’Internet a provoqué une petite révolution en ouvrant non seulement les standards mais, plus important encore, l’ensemble du processus de standardisation. Tant que le groupe, créé en 1986, comportait quelques dizaines ou centaines d’adhérents, son impact était resté limité mais il connut une forte montée en puissance au début des années deux mille. La nature du processus de spécification confère une grande robustesse aux standards issus de l’<abbr>IETF</abbr> : les spécifications sont élaborées de façon collaborative et publique puis ne sont validées qu’après que deux démonstrateurs développés indépendamment aient été présentés. Le succès de ce modèle l’a rendu contaminant, il a par exemple amené l’<abbr>IEEE</abbr> à ouvrir ses propres standards. De même, compte tenu de leur robustesse l’ISO adopte tels quels les standards de l’<abbr>IETF</abbr> car il est difficile de faire mieux. </p>

      <h4 id="part2-5.4.9">5.4.9 Les modèles économiques du logiciel libre aujourd’hui ?</h4>
      <p> L’observation de la situation à l’approche de 2013 permet de pointer quelques tendances. Une première à propos du marché relativement récent des <i lang="en" xml:lang="en">application stores</i> (<i lang="en" xml:lang="en" class="droit">Apple AppStore</i> et <i lang="en" xml:lang="en" class="droit">Google Play</i>) qui sont installés sur des téléphones ou des tablettes embarquant des systèmes d’exploitation basés sur des noyaux Unix (respectivement <abbr>BSD</abbr> et GNU/Linux). Ce modèle, que l’on pourrait qualifier de  <i lang="en" xml:lang="en">Tollware</i> ou logiciel à péage, s’étend rapidement. Son principe consiste à mettre une plate-forme dotée de fonctionnalités de base en libre accès et de proposer des fonctions ou des contenus supplémentaires prenant la forme de programmes, plugins, etc. Le gros intérêt de cette architecture modulaire est de permettre à des développeurs individuels ou à de très petites entreprises, et donc à une très large population d’acteurs potentiels, de participer activement à l’écosystème. À ce titre Apple, dont l’AppStore a disséminé plus de trente milliards d’Apps, a déjà versé plus de cinq milliards de dollars aux développeurs souvent indépendants <a epub:type="noteref" href="#note_39" id="ref_39"> <sup>[39]</sup></a>. </p>
      <p> Cette coexistence de la multinationale et de « l’artisan » <a epub:type="noteref" href="#note_40" id="ref_40"> <sup>[40]</sup></a> montre la grande diversité d’échelle des entités qui peuvent participer à un même écosystème. </p>
      <p> Une autre tendance est la multiplication d’écosystèmes fermés (par un péage ou une délimitation organisationnelle), selon un modèle qui s’apparente aux forges logicielles privées. Le principe consiste à mutualiser les développements entre un nombre limité d’acteurs, ce qui induit une limitation proportionnelle de l’effet de levier et de la puissance de débogage. </p>
      <p> Les métiers de l’ingénierie des communautés sont en plein développement et leur rôle pour les années à venir s’annonce stratégique pour la plupart des organisations. Face à la pénurie qui se dessine ce métier voit la création des premiers cursus académiques spécialisés, comme c’est déjà le cas dans la <i lang="en" xml:lang="en" class="droit">Silicon Valley</i> <a epub:type="noteref" href="#note_41" id="ref_41"> <sup>[41]</sup></a>. Il est raisonnable de supposer que la décennie à venir verra une généralisation de ces formations dans les universités européennes. </p>
      <p> À cet égard les communautés d’utilisateurs sont en plein essor notamment dans des branches professionnelles. Souvent leur objectif premier est de réaliser des économies en mutualisant les coûts de développement de logiciels métier et de capitaliser en achetant collectivement des logiciels à code ouvert, cependant elles vont souvent plus loin que cela en offrant des services mutualisés (support, formation, etc.). </p>
      <p> Le lecteur s’étonnera peut-être que nous n’ayons pas parlé du <i lang="en" xml:lang="en">desktop</i> dans ce chapitre. Cette absence est volontaire. L’ordinateur de bureau ne nous paraît pas destiné à un avenir aussi prometteur que des terminaux comme le smartphone, la tablette ou des dispositifs dont le format reste à inventer. Ensuite, la concurrence pourtant vive qui règne entre les différents bureaux des distributions GNU/Linux a échoué à établir un standard stabilisé et il paraît bien tard pour y remédier. L’arrivée de <abbr>HTML5</abbr> pourrait constituer l’amorce d’une solution, sous réserve d’une convergence des différentes versions de cette syntaxe. </p>
    </section>

    <section epub:type="bodymatter subchapter">
      <h3 id="part2-5.5">5.5 Conclusion</h3>
      <p> Le mouvement du logiciel libre est une instance du principe plus général d’<i lang="en" xml:lang="en">openness</i>. Il s’agit du modèle sur lequel est construit le modèle scientifique basé sur la production, le partage et la diffusion des connaissances. L’<i lang="en" xml:lang="en">openness</i> produit naturellement de l’abondance dès que cela est possible, de la qualité, des communautés fortes et de l’innovation. Ce principe, s’il ne permet pas un retour financier direct produit en revanche une situation propice à une activité économique à travers un écosystème. Dans cette perspective, le logiciel libre permet de générer de la valeur sous la forme de produits reproductibles et améliorables sans limite dont la mise en œuvre crée puis entretient un écosystème. Ce dernier offre de nouvelles potentialités de marchés et donc d’activités économiques permettant de récupérer, indirectement, la valeur investie initialement, et parfois bien au-delà. On constate donc que l’<i lang="en" xml:lang="en">openness</i> en général, et le logiciel libre en particulier, n’est pas un modèle économique en soi mais un facilitateur de modèles économiques à travers l’écosystème qu’il produit. Les domaines les plus susceptibles de produire des succès sont ceux qui permettent de générer l’effet de levier le plus important, autrement dit ceux qui concernent les problèmes les plus communs et partagés par le plus grand nombre de personnes ou d’organisations, comme les biens non rivaux. Pour autant, comme nous l’avons vu avec l’<i lang="en" xml:lang="en">open hardware</i>, les produits rivaux, bénéficient aussi grandement de l’<i lang="en" xml:lang="en">openness</i> qui s’applique alors à leur environnement informationnel et cognitif. </p>
      <p> Sur l’axe allant des infrastructures aux applicatifs, le type de demande remplissant le mieux ces critères est le besoin d’infrastructures et ce qui y répond le moins bien sont les applicatifs très spécifiques dont on comprend qu’ils n’offrent pas de grands effets de levier. Cela permet de tracer un modèle hiérarchisé s’étendant du niveau « infrastructures globales » au niveau « applications spécifiques ». </p>
      <p> En somme, pour fonctionner correctement les modèles économiques du logiciel libre doivent chercher un effet indirect car la licence d’un logiciel – véritablement – libre étant par définition ouverte et gratuite, il faut gagner sa vie « autour » et pas « dessus ». Par ailleurs les modèles pseudo-libres, c’est-à-dire ceux qui tentent d’allier les avantages du libre et du propriétaire, n’atteignent pas une diffusion suffisante pour établir un écosystème et ne parviennent donc pas à générer une activité économique viable. </p>
      <p> Les grandes organisations paraissent commencer à se tourner vers le logiciel libre : la santé, l’industrie automobile, le gouvernement. De même, des domaines applicatifs comme la gestion de grands ensembles de données seront probablement de plus en plus utilisateurs, et souhaitons-le contributeurs, au logiciel libre, notamment à travers les données ouvertes, <i lang="en" xml:lang="en">open data</i>, dont le potentiel est aujourd’hui notoirement sous-estimé – et sous-exploité – en Europe (contrairement aux États-Unis et à l’Asie). </p>
      <p> Ce chapitre se refermera en mentionnant quelques défis que nous devons relever dans le mouvement du logiciel libre. </p>
      <p> Il nous faut, tout d’abord, parvenir à séduire les personnes n’ayant pas d’aptitudes techniques dans le domaine de l’informatique. Elles sont très nombreuses, beaucoup plus que celles qui en disposent. Le gisement d’écosystèmes potentiels est considérable. Il nous faut pour cela convaincre les concepteurs, les ergonomes, les cogniticiens, les sociologues, anthropologues, ethnologues, que le logiciel libre n’est pas le domaine réservé des informaticiens, il peut et doit aussi devenir le projet de chacun. Nous devons aussi expliquer ou réexpliquer à nos politiques, à nos dirigeants, à nos industriels, ce que leurs prédécesseurs du siècle des Lumières avaient fort bien compris : l’<i lang="en" xml:lang="en">openness</i>est la solution la plus efficace que l’on connaisse pour créer de l’innovation et de la prospérité, elle doit être la priorité numéro un de toute politique visant un développement économique. Souvenons-nous également que la fonction première et essentielle du secteur public est de préparer le terreau infra-structurel sur lequel le secteur privé et l’économie pourront prospérer. </p>
      <p> Pour pouvoir relever ces défis, il est indispensable d’informer, de sensibiliser et de former tous ceux qui le souhaitent à l’<i lang="en" xml:lang="en">openness</i>, c’est-à-dire a) à la gouvernance de communautés, b) aux problématiques liées aux licences et c) au développement collaboratif de logiciels informatiques. Il est tout aussi indispensable d’ouvrir l’information et la connaissance et de renvoyer les inventions, notamment celles financées par le secteur public, vers le tissu social afin de faire émerger des écosystèmes qui, nous l’avons vu, constituent la condition préalable de tout développement économique. </p>
      <p> Agir selon la philosophie de l’<i lang="en" xml:lang="en">openness</i> n’est pas une utopie, bien au contraire les faits indiquent qu’il s’agit d’une attitude extrêmement pragmatique produisant, indirectement, des effets économiques majeurs. L’illustration des soieries lyonnaises est un cas parmi d’autres et l’Histoire montre de manière récurrente que si le mouvement d’adoption de l’<i lang="en" xml:lang="en">openness</i> est suffisamment ample, il est susceptible produire un impact sociétal de forte magnitude menant à de longues périodes de prospérité économique. </p>
      <p> Voilà de beaux défis qui nous attendent !</p>
    </section>

    <aside epub:type="footnotes" class="epub-footnotes">
      <ol>
        <li><a epub:type="footnote" href="#ref_1" id="note_1">[1]</a> <span class="auteur">Moglen</span>, Eben <cite lang="en" xml:lang="en">Innovation under Austerity</cite>, <i class="droit" lang="en" xml:lang="en"><abbr>F2C</abbr> Freedom to Connect</i>, 2012. </li>
        <li><a epub:type="footnote" href="#ref_2" id="note_2">[2]</a> Nous indiquerons en note de bas de page le modèle économique mis en œuvre, précédé de « ME ». Dans ce cas il s’agit de la vente d’un ensemble indissociable constitué d’un équipement matériel et des logiciels permettant de l’exploiter. </li>
        <li><a epub:type="footnote" href="#ref_3" id="note_3">[3]</a> ME : création d’un écosystème.</li>
        <li><a epub:type="footnote" href="#ref_4" id="note_4">[4]</a> ME : l’activité académique favorise la création d’écosystèmes.</li>
        <li><a epub:type="footnote" href="#ref_5" id="note_5">[5]</a> ME : l’émergence de standards ouverts est un terreau favorable au développement économique. </li>
        <li><a epub:type="footnote" href="#ref_6" id="note_6">[6]</a> Jusque-là les licences étaient gratuites pour les applications liées à la recherche et très peu coûteuses pour les usages administratifs. </li>
        <li><a epub:type="footnote" href="#ref_7" id="note_7">[7]</a> ME : la mutualisation de l’effort de développement par effet de levier est une source de croissance pour les entreprises, elle leur permet d’affecter leurs ressources sur leur cœur de métier. </li>
        <li><a epub:type="footnote" href="#ref_8" id="note_8">[8]</a> ME : la vente liée est controversée, voire interdite, mais elle permet de réaliser d’importants profits. </li>
        <li><a epub:type="footnote" href="#ref_9" id="note_9">[9]</a> ME : premier modèle à fondation, rassemblant des concurrents autour d’un projet commun. </li>
        <li><a epub:type="footnote" href="#ref_10" id="note_10">[10]</a> ME : la standardisation permet de favoriser l’émergence d’écosystèmes propices aux affaires. </li>
        <li><a epub:type="footnote" href="#ref_11" id="note_11">[11]</a> <span class="auteur">Berners-Lee</span>, Tim <cite lang="en" xml:lang="en"><a href="http://www.thewritingcode.com/pdfs/TimBLTranscript.pdf">The writing code, Stata Center Opening Symposium</a></cite>, 2007 ME : un choix doit être fait entre velléités de contrôle et le potentiel de diffusion d’un projet d’<i lang="en" xml:lang="en">open source</i>. </li>
        <li><a epub:type="footnote" href="#ref_12" id="note_12">[12]</a> <span class="auteur">Tiemann</span>, Michael <cite lang="en" xml:lang="en"><a href="http://www.opensource.org/history">History of the <abbr>OSI</abbr></a></cite>. 2012 </li>
        <li><a epub:type="footnote" href="#ref_13" id="note_13">[13]</a> ME : édition de distributions de logiciels à valeur ajoutée (installeur, intégration, cohérence et compatibilité des versions, assurance juridique, etc.).  </li>
        <li><a epub:type="footnote" href="#ref_14" id="note_14">[14]</a> <span class="auteur">Raymond</span>, Eric S. <cite lang="en" xml:lang="en"><a href="http://www.catb.org/esr/writings/homesteading/">The Cathedral and the Bazaar</a></cite>. Sebastopol, <abbr>CA</abbr>: O’Reilly, 2001 </li>
        <li><a epub:type="footnote" href="#ref_15" id="note_15">[15]</a> ME : céder du contrôle <i lang="la" xml:lang="la">vs</i> gagner de l’ampleur.  </li>
        <li><a epub:type="footnote" href="#ref_16" id="note_16">[16]</a> <span class="auteur">Gardler</span>, Ross « <i lang="en" xml:lang="en" class="droit">Community over code</i> », dans <cite>Conference fOSSa</cite>, Grenoble, 2010.  </li>
        <li><a epub:type="footnote" href="#ref_17" id="note_17">[17]</a> Cité par <span class="auteur">Bordage</span>, Frédéric, « <a href="http://pro.01net.com/editorial/270447/open-source-la-naissance-dun-ecosysteme/"><i lang="en" xml:lang="en" class="droit">Open source</i> : la naissance d’un écosystème</a> », dans :<cite>01Net</cite>, 2005 </li>
        <li><a epub:type="footnote" href="#ref_18" id="note_18">[18]</a> ME : modèle de la double licence.  </li>
        <li><a epub:type="footnote" href="#ref_19" id="note_19">[19]</a> ME : création réussie d’un écosystème riche et varié.  </li>
        <li><a epub:type="footnote" href="#ref_20" id="note_20">[20]</a> ME : vente de services autour d’une base standardisée.  </li>
        <li><a epub:type="footnote" href="#ref_21" id="note_21">[21]</a> ME : la licence différée est un modèle répandu. Elle présente cependant l’inconvénient, en restreignant la diffusion des versions récentes, de proposer paradoxalement aux utilisateurs payants un logiciel moins testé donc de moindre qualité que ne l’est la version ouverte.  </li>
        <li><a epub:type="footnote" href="#ref_22" id="note_22">[22]</a> ME : effet de levier par mutualisation de ressources, plus le problème est partagé entre un nombre élevé d’utilisateurs, plus cet effet est important.  </li>
        <li><a epub:type="footnote" href="#ref_23" id="note_23">[23]</a> <span class="auteur">Élie</span>, François, « <i lang="en" xml:lang="en" class="droit">Mobile, Cloud and the Digital Native Generation</i> » dans <cite>Conference fOSSa</cite> INSA Lyon, 2011. ME : contrôle du projet par les utilisateurs pour une meilleure prise en compte des besoins.  </li>
        <li><a epub:type="footnote" href="#ref_24" id="note_24">[24]</a> ME : Modèle à fondation tourné vers la création d’un écosystème.  </li>
        <li><a epub:type="footnote" href="#ref_25" id="note_25">[25]</a> ME : autre illustration du compromis contrôle <i lang="la" xml:lang="la">vs</i> ampleur.  </li>
        <li><a epub:type="footnote" href="#ref_26" id="note_26">[26]</a> <span class="auteur">Scoffoni</span>, Philippe <cite><a href="http://philippe.scoffoni.net/libreoffice-openoffice-fork-vu-de-linterieur">LibreOffice, <i class="droit" lang="en" xml:lang="en">OpenOffice</i> un fork vu de l’intérieur</a></cite>, 2011 </li>
        <li><a epub:type="footnote" href="#ref_27" id="note_27">[27]</a> <span class="auteur">David</span>, Paul A. <cite lang="en" xml:lang="en">An Essay on Patronage, Reputation and Common Agency Contracting in The Scientific Revolution</cite>, <i lang="en" xml:lang="en" class="droit">Stanford: Stanford University</i>, 2007 p. 15.  </li>
        <li><a epub:type="footnote" href="#ref_28" id="note_28">[28]</a> <span class="auteur">Wemger</span>, Étienne <cite lang="en" xml:lang="en">Communities of Practice: Learning, Meaning, and Identity</cite>, 1<sup>ére</sup> édition. <i lang="en" xml:lang="en" class="droit">Cambridge, Mass.: Cambridge University Press</i>, 1999.  </li>
        <li><a epub:type="footnote" href="#ref_29" id="note_29">[29]</a> ME : modèle de l’<i lang="en" xml:lang="en">open science</i> visant à faire circuler l’information le plus librement possible.  </li>
        <li><a epub:type="footnote" href="#ref_30" id="note_30">[30]</a> ME : mesure de l’impact par un comptage (équivalent du nombre de téléchargements ?).  </li>
        <li><a epub:type="footnote" href="#ref_31" id="note_31">[31]</a> ME : le développement de l’écosystème est une priorité, il est considéré comme la finalité de l’openness.  </li>
        <li><a epub:type="footnote" href="#ref_32" id="note_32">[32]</a> ME : <i lang="en" xml:lang="en">openness</i> généralisée →émergence de gros écosystèmes → large impact sociétal → amorçage d’un cercle vertueux de prospérité (production d’une richesse partagée par la grande majorité de la population, etc.) </li>
        <li><a epub:type="footnote" href="#ref_33" id="note_33">[33]</a> Cité par <span class="auteur">Foray</span>, Dominique et Liliane Hilaire <span class="auteur">Pérez</span> « <i lang="en" xml:lang="en" class="droit">The economics of open technology: collective organization and individual claims in the "<i lang="fr" xml:lang="fr">fabrique lyonnaise</i>" during the old regime</i> », dans : <cite lang="en" xml:lang="en">Frontiers in the economics of innovation and new technology.  Essays in honor of Paul A. David</cite>, sous la direction de Cristiano <span class="auteur">Antonelli</span> et al.,  Cheltenham : Edward Elgar Pub., 2005, p.  239-254.   </li>
        <li><a epub:type="footnote" href="#ref_34" id="note_34">[34]</a> ME : la cathédrale.  </li>
        <li><a epub:type="footnote" href="#ref_35" id="note_35">[35]</a> ME : modèle centré sur le client.  </li>
        <li><a epub:type="footnote" href="#ref_36" id="note_36">[36]</a> ME : modèle centré sur le fournisseur.  </li>
        <li><a epub:type="footnote" href="#ref_37" id="note_37">[37]</a> ME : la cathédrale.  </li>
        <li><a epub:type="footnote" href="#ref_38" id="note_38">[38]</a> ME : écosystème de services autour du <abbr>SAV</abbr> et de la vente de pièces détachées basé sur la standardisation.</li>
        <li><a epub:type="footnote" href="#ref_39" id="note_39">[39]</a> <span class="auteur">Dediu</span>, Horace « <i lang="en" xml:lang="en" class="droit"><a href="http://www.asymco.com/2012/06/12the-ios-app-market-sales-run-rate-is-4-billion-per-year/">The <abbr>iOS</abbr> App market sales run rate is 4 billion per year</a></i> », dans <cite>Aymco</cite> 2012 </li>
        <li><a epub:type="footnote" href="#ref_40" id="note_40">[40]</a> <span class="auteur">Guesdon</span>, Maxence<cite> <a href="http://www.oranadoz.net/sur-le-metier-de-developpeur-de-logiciels/">Sur le métier de développeur de logiciels</a></cite>, 2012 </li>
        <li><a epub:type="footnote" href="#ref_41" id="note_41">[41]</a> Par exemple le COSI, <i lang="en" xml:lang="en" class="droit">Center for Open Source Investigation</i>, fondé par la <i lang="en" xml:lang="en" class="droit">Carnegie Mellon University</i> que dirige Tony Wasserman.  </li>
      </ol>
    </aside>
  </body>
</html>
