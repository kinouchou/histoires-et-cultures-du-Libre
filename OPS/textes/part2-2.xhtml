<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xml:lang="fr" lang="fr">
  <head>
    <title>Le logiciel libre : un renouveau du modèle industriel coopératif de l’informatique</title>
    <link rel="stylesheet" href="../styles/stylesheet.css" type="text/css" />
  </head>
  <body epub:type="bodymatter chapter">
    <h2 id="part2-6" class="titre-chapitre">
      6. Le logiciel libre : un renouveau du modèle industriel coopératif de l’informatique<a epub:type="noteref" href="#note_intro" id="ref_intro"> <sup>[*]</sup></a>
    </h2>
    <p class="signature">
      Nicolas <span class="auteur">Jullien</span><br />
      Jean-Benoît <span class="auteur">Zimmermann</span>
    </p>

    <nav id="TOC" epub:type="bodymatter toc" class="epub-toc">
      <ol>
        <li><a href="#part2-6.1"> 6.1 Le modèle coopératif de production du logiciel, des origines au renouveau porté par Internet </a>
          <ol>
            <li><a href="#part2-6.1.1"> 6.1.1 Aux origines, une production coopérative de logiciel </a></li>
            <li><a href="#part2-6.1.2"> 6.1.2 Une production coopérative de plus en plus marginale, même si elle reste importante pour l’innovation en informatique </a></li>
            <li><a href="#part2-6.1.3"> 6.1.3 Un renouveau de la production coopérative grâce à Internet : épiphénomène ou tendance de fond ? </a></li>
          </ol>
        </li>
        <li><a href="#part2-6.2"> 6.2 Les modèles industriels du Libre </a>
          <ol>
            <li><a href="#part2-6.2.1"> 6.2.1 Des avantages spécifiques au logiciel libre </a></li>
            <li><a href="#part2-6.2.2"> 6.2.2 Des modèles basés sur les spécificités du Libre </a></li>
            <li><a href="#part2-6.2.3"> 6.2.3 Analyse </a></li>
          </ol>
        </li>
        <li><a href="#part2-6.3"> 6.3 Conclusion </a></li>
      </ol>
    </nav>

    <p> Cela fait maintenant plusieurs années que le phénomène du logiciel libre a émergé dans la sphère économique et de nombreux travaux scientifiques s’y sont intéressés, parmi lesquels ceux publiés dans <em>Terminal</em> en 1999 <a epub:type="noteref" href="#note_1" id="ref_1"> <sup>[1]</sup></a> qui ont été précurseurs. Un logiciel libre est un logiciel dont le code source est rendu librement accessible de manière à pouvoir être utilisé, modifié ou intégré dans d’autres logiciels dans des conditions qui sont définies par le type de licence qui lui est attachée et qui constitue une forme de contrat entre son ou ses auteurs et ses futurs utilisateurs. Aujourd’hui, le logiciel libre semble devenu un enjeu économique majeur, notamment pour l’Europe, comme en témoigne un rapport déjà ancien publié par la Commission Européenne fin 2006 <a epub:type="noteref" href="#note_2" id="ref_2"> <sup>[2]</sup></a>, ou l’analyse de Dang Nguyen &amp; Genthon <a epub:type="noteref" href="#note_3" id="ref_3"> <sup>[3]</sup></a> : « en focalisant sur un programme ambitieux de production de logiciel libre dans les systèmes embarqués et les réseaux domestiques, l’Europe peut atteindre plusieurs objectifs : permettre le libre accès à une ressource essentielle, stimuler la concurrence, faciliter la réalisation des objectifs de Lisbonne, et restaurer la compétitivité européenne dans les TIC. » </p>
    <p> S’il s’agit toujours d’une organisation non marchande de production, ses produits intéressent le monde marchand, depuis <abbr>IBM</abbr> <a epub:type="noteref" href="#note_4" id="ref_4"> <sup>[4]</sup></a> qui a annoncé en 2001 investir plus d’un milliard de dollars dans Linux jusqu’à la <i lang="en" xml:lang="en"><a href="http://www.microsoft.com/resources/sharedsource/default.mspx">shared source initiative</a></i> de Microsoft , qui reprend l’idée du partage du code source avec les utilisateurs, et distribue même certains de ses logiciels sous une licence <i lang="en" xml:lang="en"><a href="http://solutions.journaldunet.com/0404/040407_microsoft.shtml">open source</a></i>, en passant par l’État français, qui a reconnu l’excellence française dans ce domaine, et autorisé la création d’un « pôle » logiciel libre au pôle de compétitivité <a href="http://www.systematic-paris-region.org/fr/logiciel-libre">Systematic</a>, ou encore l’entreprise Red Hat qui a récemment franchi le cap du milliard de dollars de chiffre d’affaires <a epub:type="noteref" href="#note_5" id="ref_5"> <sup>[5]</sup></a>. </p>
    <p> Le phénomène ne concerne plus seulement les informaticiens ou le marché des grandes organisations (« grands comptes informatiques ») : les entreprises proposant des solutions <i lang="en" xml:lang="en">libres</i> se tournent aussi de plus en plus vers les <abbr>PME</abbr>, comme en témoignait déjà le dossier du <cite><a href="http://solutions.journaldunet.com/dossiers/libre/sommaire.shtml">Journal du Net</a></cite> de septembre 2005. Lakhani et Wolf <a epub:type="noteref" href="#note_6" id="ref_6"> <sup>[6]</sup></a> relevaient que, parmi les développeurs de logiciel libre ayant répondu à leur enquête, une majorité des répondants étaient des professionnels de l’informatique et environ 40% étaient payés pour participer à des projets libres/<i lang="en" xml:lang="en">open source</i>. Enfin, l’intérêt du monde marchand pour le modèle du libre dépasse le cadre de l’informatique pour se diffuser aussi dans les télécommunications <a epub:type="noteref" href="#note_7" id="ref_7"> <sup>[7]</sup></a>. </p>
    <p> Tous ces éléments traduisent une situation qui peut être entendue sous l’angle de l’émergence d’un marché, au sens d’un échange marchand de biens et de services et être analysée dans une perspective d’économie industrielle. En même temps, la production de logiciel libre repose d’abord sur une collaboration, une co-production, sans échange financier, entre différents producteurs. C’est cette articulation entre une production collective, non marchande, que nous qualifierons dans la suite de « coopérative », et son succès commercial qui fait toute la richesse de l’écosystème que nous nommerons « le Libre », et que nous nous proposons d’expliquer ici. </p>
    <p> D’un point de vue général, nous nommerons « libre » toute création de nature intellectuelle (artistique, littéraire, scientifique et plus généralement de connaissance) dont l’accès et l’usage sont autorisés sans exclusivité, sous la seule condition de ne pas en altérer les conditions. En ce sens la notion de Libre s’apparente à la notion économique de « commun » qui désigne le partage d’une ressource ou d’un ensemble de ressources que celles-ci aient une origine naturelle, de production privée ou de production publique. On comprend facilement que la notion de commun est inséparable des modalités de gouvernance qui lui sont attachées en vue de définir les conditions de son usage, de sa préservation et de sa reproduction, voire de son aliénation. On peut par exemple penser aux conditions d’exploitation d’une ressource de pêche. En ce qui concerne le logiciel libre, cette définition permet de comprendre pourquoi la question du droit d’auteur reste au cœur de la problématique, au contraire du domaine public caractérisé par une absence ou une disparition de toute propriété intellectuelle. </p>
    <p> Dans une première partie, nous expliquerons comment le modèle de production coopératif trouve ses racines très loin dans l’histoire de l’industrie informatique puisqu’il était celui des origines ; pourquoi il a été mis à mal par la marchandisation du logiciel et le développement de stratégies propriétaires et d’incompatibilité ; et comment il renaît dans les années 1980 et surtout 1990, porté par le formidable outil de diffusion et d’échange que constitue Internet (là aussi, et dans la suite de l’article, en tant qu’écosystème, basé sur un protocole réseau, des applications et des usages). Mais il y a lieu de s’interroger sur la durabilité du modèle confronté une fois encore aux impératifs de la sphère marchande. C’est pourquoi la deuxième partie de ce chapitre s’applique à dégager les avantages comparatifs du mode de production libre par rapport à celui dit propriétaire, qui pourraient fonder sa pérennité dans un contexte profondément transformé des modes de production, de distribution et d’utilisation en ce début de troisième millénaire. </p>

    <section epub:type="bodymatter subchapter">
      <h3 id="part2-6.1">6.1 Le modèle coopératif de production du logiciel, des origines au renouveau porté par Internet</h3>

      <h4 id="part2-6.1.1">6.1.1 Aux origines, une production coopérative de logiciel</h4>
      <p> Au début de l’informatique, dans les années 1950, la production d’ordinateurs était presque exclusivement une production américaine. L’activité informatique était très liée aux projets militaires, aux financements militaires et aux projets de recherche : l’État américain a financé la recherche et le développement de l’informatique à ses débuts et la plupart des machines produites à cette époque l’on été pour ce « client » <a epub:type="noteref" href="#note_8" id="ref_8"> <sup>[8]</sup></a>. </p>
      <p> Les machines étaient livrées « nues » par le fournisseur, c’est-à-dire sans programmes. Le fournisseur aidait son client à mettre en œuvre ses machines et à développer les programmes qui lui permettaient de les utiliser. Le logiciel était alors considéré comme un outil et un objet de recherche. Sa production reposait sur des relations de collaboration poussées entre centres de recherche publics et industrie <a epub:type="noteref" href="#note_9" id="ref_9"> <sup>[9]</sup></a> et les principaux utilisateurs de logiciel étaient alors les principaux producteurs (les universités, les grandes entreprises, surtout celles liées à l’industrie de défense et, bien sûr, le principal producteur de machines informatiques, <abbr>IBM</abbr>). </p>
      <p> L’ensemble des logiciels produits était disponible, sans droits de propriété ; la notion même de propriété intellectuelle du logiciel n’existait pas. La seule façon de protéger un logiciel était de le garder secret, ce qui n’était pas la stratégie soutenue par les institutions publiques et par les entreprises informatiques émergentes. En effet, la diffusion de logiciels dans le domaine public était directement bénéfique aux producteurs : plus la quantité de logiciels disponibles était grande, plus l’étaient les incitations à acheter un ordinateur. De plus, le département américain de la défense (<abbr lang="en" xml:lang="en">DoD</abbr>) a encouragé ces pratiques en finançant des programmes de recherche et de développement coopératifs universités-entreprises. Il a aussi favorisé la diffusion des « bonnes pratiques » de programmation <a epub:type="noteref" href="#note_10" id="ref_10"> <sup>[10]</sup></a>. </p>
      <p> On le voit, la production coopérative n’est pas neuve. Elle a même dominé tous les débuts de l’informatique. Pour comprendre comment les choses ont évolué, il est nécessaire de prendre en compte les stratégies industrielles des grandes firmes de l’informatique et tout particulièrement celle de leur <i lang="en" xml:lang="en" class="droit">leader</i>, <abbr>IBM</abbr>. En effet, au-delà de la demande publique originelle, ces entreprises entendaient valoriser leur activité sur un vrai marché, celui des « grands comptes », grandes entreprises et grandes administrations, principalement en Amérique et en Europe, et bénéficier ainsi d’importants effets d’échelle <a epub:type="noteref" href="#note_11" id="ref_11"> <sup>[11]</sup></a>. <abbr>IBM</abbr> en particulier menait une politique commerciale très offensive chez ses grands clients. S’appuyant sur les « directions informatiques », états dans l’État dont elle avait soutenu la création au sein des structures utilisatrices, elle y vendait des solutions à des problèmes, principalement de l’ordre de la gestion et de l’administration, c’est-à-dire des combinaisons appropriées de matériels et de logiciels, en réponse aux besoins du client et à ses caractéristiques propres. Cette manière de faire permettait ensuite de fonder des arguments de vente de nouveaux éléments coûteux, notamment des périphériques, afin d’inciter le client utilisateur à une utilisation plus efficace des capacités de son système. Or, c’est précisément ce type de stratégie commerciale qui a été visé par la législation anti-trust américaine en 1969, qui voyait dans cette pratique commerciale, un abus de position dominante, fondé sur la facturation jointe du logiciel et du matériel. Injonction a donc été faite aux producteurs informatiques de procéder à la facturation séparée (<i lang="en" xml:lang="en">unbundling</i>) du logiciel et du ou des matériels. Le logiciel acquérait ainsi un statut de marchandise et, en tant que tel, requérait d’être protégé (ce qui fut fait par recours au droit d’auteur). </p>
      <p> Puisqu’il devait être facturé séparément, le logiciel devenait alors l’objet de transactions marchandes et donc d’un marché, ce qui apparut rapidement contradictoire avec la libre circulation et la production coopérative dont il était l’objet jusque-là. Ainsi, le paradoxe est que, de par les lois du marché, cette production coopérative s’est marginalisée alors qu’elle semblait satisfaire l’ensemble des acteurs, producteurs et utilisateurs de logiciels. Un certain nombre d’acteurs ont su tirer profit de cette situation nouvelle. </p>

      <h4 id="part2-6.1.2">6.1.2 Une production coopérative de plus en plus marginale, même si elle reste importante pour l’innovation en informatique</h4>
      <p> Le marché des logiciels et des services se développe vraiment à partir des années 1970. Le système de production coopératif et hors marchand est alors petit à petit occulté. Il ne disparaît pas complètement pour autant, ainsi que le montre l’exemple du système d’exploitation pour station de travail et serveur Unix. D’abord développé de façon collaborative par des entreprises et des universités, Unix était inspiré du projet de recherche « Multics », qui regroupait les Bell Labs d’AT&amp;T, le <abbr lang="en" xml:lang="en">MIT</abbr> et <i lang="en" xml:lang="en" class="droit">General Electric</i>, avec des financements fédéraux. Faute de ressources, il est abandonné en 1968. Il est repris par deux informaticiens des Bell Labs, Dennis Ritchie et Ken Thompson, rejoints en 1970 par Brian Kernighan. La première version documentée d’Unix fut terminée en 1971 et diffusée librement (AT&amp;T, du fait de son monopole dans les télécommunications, n’avait pas le droit d’avoir des activités commerciales en informatique). Elle s’impose rapidement dans les universités d’informatique, qui contribuent fortement à son évolution (principalement l’université de Berkeley, à partir de 1977) <a epub:type="noteref" href="#note_12" id="ref_12"> <sup>[12]</sup></a>. </p>
      <p> Mais il y avait une séparation de plus en plus nette entre le système de production, coopératif, souvent issu du milieu de la recherche, qui pouvait initier des projets, et le système qui distribuait et adaptait le projet aux besoins des utilisateurs. Pour le dire autrement, des entreprises se sont approprié ces logiciels, et en ont assuré la distribution et l’évolution. </p>
      <p> Encore une fois, il est nécessaire de prendre en compte les stratégies industrielles des constructeurs informatiques pour comprendre la situation. La stratégie commerciale d’<abbr>IBM</abbr> et des grands constructeurs d’« ordinateurs universels » (<i lang="en" xml:lang="en">mainframes</i>), consistant à vendre des « solutions » clefs en main aux grands comptes, avait été ébranlée par la législation anti-trust. Parallèlement, les progrès technologiques, surtout liés à la miniaturisation croissante des composants et à la généralisation des circuits intégrés avaient permis de concevoir des ordinateurs plus petits et moins coûteux, permettant une ouverture du marché vers des clients de moindre taille. Un nouveau venu, DEC (<i lang="en" xml:lang="en" class="droit">Digital Equipment Corporation</i>), en lien étroit avec le <abbr lang="en" xml:lang="en">MIT</abbr>, s’était engouffré dans la brèche en introduisant un nouveau concept commercial, celui des mini-ordinateurs, systèmes de petite taille commercialisés nus, dotés de leur seul système d’exploitation. </p>
      <p> Il revenait alors à l’utilisateur de spécifier ses propres besoins d’utilisation et de développer ou de faire développer les logiciels d’application correspondants. Cette nouvelle approche consacra la séparation entre les activités de production d’ordinateurs et celle de développement de logiciels d’utilisation. Les constructeurs d’ordinateurs restèrent bien sûr concernés par les systèmes d’exploitation que DEC s’évertuait à rendre compatibles au sein de son offre d’ordinateurs tandis qu’<abbr>IBM</abbr> butait sur ses propres incompatibilités y compris au sein d’une même gamme de machines. </p>
      <p> Mais le plus important pour notre propos était que les logiciels d’application, en tant que tels, et non plus incorporés dans une machine, étaient désormais l’objet d’une demande à laquelle répondaient un nombre croissant d’entreprises spécialisées, les <i lang="en" xml:lang="en">software houses</i>. Un véritable marché du logiciel est né qui restera longtemps encore dominé par une offre sur mesure, proche du service, en attendant que de véritables espaces de compatibilité se fassent jour dans les années 1980, permettant la portabilité de logiciels standards. </p>
      <p> Dans le cas d’Unix, AT&amp;T qui fut autorisée à entrer sur le marché de l’informatique en 1984 a alors demandé le paiement de ses droits sur le nom Unix et sur le système dont elle était à l’origine. Dès le début des années 1980, l’entreprise SUN utilisait, pour faire fonctionner ses stations de travail, un système d’exploitation qu’elle avait adapté d’une version issue de Berkeley, système dont elle se réservait les possibilités d’évolution. Dans son sillage, <abbr>IBM</abbr>, <abbr>HP</abbr>, DEC et bien d’autres se sont rangées à cette logique propriétaire en offrant chacune à leurs clients leur propre version d’Unix, incompatible avec celle de ses concurrents. Plus près de nous, dans les années 2000, Apple s’est approprié la version 5 de <i lang="en" xml:lang="en" class="droit">Free<abbr>BSD</abbr></i>(un descendant libre de l’Unix de Berkeley) pour en faire le système d’exploitation Mac<abbr>OS</abbr> X. Ce nouveau partitionnement d’un monde qui aurait pourtant pu s’unifier est source d’inefficacité économique (coûts de développement, coûts de migration, moindre croissance du marché…). </p>
      <p> Pour tenter d’y remédier, un mouvement a vu le jour autour de la notion de systèmes ouverts. En particulier est né en 1984 le groupe X/Open fondé par un ensemble international de grands constructeurs d’ordinateurs. Son objectif était de « faciliter et orienter la démarche des utilisateurs de l’administration et du secteur privé, des vendeurs de logiciels, des organismes de normalisation et des fabricants de systèmes anxieux de résoudre les dilemmes technologiques résultant de l’incompatibilité de leurs divers systèmes et logiciels. » <a epub:type="noteref" href="#note_13" id="ref_13"> <sup>[13]</sup></a> </p>
      <p> Si le système de production coopératif était toujours à la base du développement de nombreux logiciels, notamment dans la recherche publique, le lien entre la demande (les utilisateurs) et les producteurs n’était désormais plus direct, mais passait par l’intermédiaire des entreprises. Il y avait d’un côté la recherche, coopérative, productrice de prototypes et financée par des subventions ou des commandes publiques et, de l’autre, l’industrie qui s’appropriait ces prototypes et qui les distribuait. </p>
      <p> Cette tendance s’affirma dans les années 1990 : ces années correspondent à un relatif désengagement des institutions fédérales américaines du financement des projets logiciels et donc à une plus grande difficulté pour initier et financer de tels projets. De plus, la recherche prit une orientation plus théorique (algorithmique, tests de stabilité des programmes, etc.). Il semble que le modèle coopératif de production du logiciel se soit transformé pour, finalement, aboutir à un schéma plus classique : les centres de recherche publics inventent de nouveaux outils et de nouveaux concepts, publiés sous des licences permettant aux industriels de se les approprier et de les transformer en objets utilisables commercialement. </p>
      <p> Pourtant, les entreprises ont continué à s’alimenter à la source des progrès techniques que représentent les centres de recherche académiques et ont bénéficié de l’émergence de nouveaux concepts comme les langages orientés objet ou les nouvelles architectures client-serveur qu’elles ont rapidement adoptés et se sont appropriés. D’autre part, la collaboration dans la recherche a été facilitée, par la diffusion de réseaux connectant les universités. Notons qu’avant même la naissance d’Internet, dans les années 1970, les chercheurs américains ont bénéficié du réseau ARPANET, ancêtre d’Internet, mis en place et financé par le département de la défense des États-Unis pour mailler le territoire américain à des fins de sécurité nationale et pour favoriser les échanges d’idées et d’outils entre universités et industries dans le domaine des technologies de l’information et de la communication. D’autres chercheurs, ailleurs, bénéficiaient des réseaux expérimentaux fondés sur la commutation par paquets et la mise au point d’architectures d’interconnexion de systèmes hétérogènes, comme le réseau français Cyclades promu par l’INRIA <a epub:type="noteref" href="#note_14" id="ref_14"> <sup>[14]</sup></a>. </p>
      <p> C’est la diffusion d’Internet et des outils Web, associée à une innovation juridique, la licence <abbr>GPL</abbr>, mais aussi les limites du système fermé, propriétaire, qui expliquent le renouveau de la production coopérative. </p>

      <h4 id="part2-6.1.3">6.1.3 Un renouveau de la production coopérative grâce à Internet : épiphénomène ou tendance de fond ?</h4>
      <p> Les protocoles à la base d’Internet (comme <abbr>TCP/IP</abbr>), et les logiciels qui les implémentent, mais aussi les systèmes d’exploitation libres comme GNU/Linux, <i lang="en" xml:lang="en" class="droit">Free<abbr>BSD</abbr></i> ou <i lang="en" xml:lang="en" class="droit">Open<abbr>BSD</abbr></i> ont pour la plupart été développés dans les universités et les centres de recherche publics <a epub:type="noteref" href="#note_15" id="ref_15"> <sup>[15]</sup></a>. </p>
      <p> C’est au CERN qu’a été développé le langage <abbr>HTML</abbr> et son système de liens hypertextes. Aujourd’hui encore, la grande majorité des logiciels d’Internet sont des logiciels libres <a epub:type="noteref" href="#note_16" id="ref_16"> <sup>[16]</sup></a>. Et il n’est pas un hasard que ce soit dans le domaine des serveurs web que les logiciels libres occupent la position la plus importante avec 65% du marché détenus par <a href="http://www.journaldunet.com/developpeur/outils/part-de-marche-des-serveurs-web">Apache</a>. Ici plus qu’ailleurs ce marché a bénéficié d’une proximité utilisateurs-développeurs sur laquelle s’est bâtie l’alternative <i lang="en" xml:lang="en">open source</i>. </p>
      <p> Les logiciels libres ont commencé à être connus en dehors de cette sphère spécialisée parce que des utilisateurs se sont aperçus qu’ils répondaient à leur demande de nouveaux services, autour d’Internet et des réseaux informatiques : serveurs de fichiers, serveurs d’imprimante. Le succès des logiciels libres repose donc d’abord sur une adéquation historique à de nouveaux marchés. Ils ne se sont pas imposés face à d’autres logiciels pour répondre à de nouveaux besoins mais se sont diffusés en même temps que les besoins auxquels ils répondaient. </p>
      <p> Internet constitue aussi un formidable outil de diffusion. Très tôt, il a été utilisé par les producteurs de logiciels libres, qui y avaient accès dans leurs universités ou dans leurs centres de recherche. Ils ont pu tirer parti de l’ensemble des nouveaux supports de diffusion rendu ainsi disponibles (listes de diffusions, news, sites Web) pour faire connaître ces logiciels et les rendre plus accessibles à de nouveaux utilisateurs. </p>
      <p> Mais la diffusion d’Internet n’a pas seulement permis la diffusion des logiciels existants. Elle a aussi rendu plus facile leur production par la mise en relation, des développeurs et donc l’organisation de projets connectant des communautés de contributeurs potentiels via des espaces d’échanges, de discussion, d’interactions, de production et d’évaluation. </p>
      <p> Comme nous l’avons dit plus haut, les réseaux, et notamment les réseaux USENET existaient avant Internet, ce sont eux qui ont permis d’initier les projets libres et de faire se rencontrer des développeurs qui avaient des besoins proches. Cependant, les débits de ces réseaux étaient faibles et les services assez pauvres. Il est certain que la diffusion d’Internet hors de la sphère de la recherche a permis aux développeurs de disposer d’un outil de coordination plus efficace : c’était le premier système qui leur offrait un accès simple à l’information et aux systèmes de stockage, depuis n’importe quel point d’entrée (et notamment de leur domicile), pour un coût modique. Internet a aussi permis la multiplication de forums spécialisés et a augmenté la probabilité que des utilisateurs-développeurs ayant des besoins spécifiques proches se rencontrent et atteignent la « masse critique » qui permet d’initier un projet. </p>
      <p> Le renouveau de la production coopérative est donc dû non seulement à l’adoption des logiciels produits par une grande population d’utilisateurs (que nous avons qualifié d’adéquation historique à de nouveaux marchés), entraînant un regain du volume de logiciels produits de façon coopérative (nous renvoyons aux chiffres de l’introduction), développant ainsi la population potentielle d’utilisateurs, etc. </p>
      <p> Qu’en est-il toutefois du devenir d’un tel mode de production confronté aux impératifs de la sphère marchande ? </p>
      <p> La première vague d’utilisation industrielle des logiciels libres, autour et grâce à Internet, s’explique par des stratégies que l’on peut qualifier d’opportunistes. Les motivations qui conduisaient les entreprises de l’informatique à utiliser et contribuer au développement de logiciels libres étaient principalement indirectes et résultaient notamment de la concurrence qu’elles se livraient pour le contrôle des standards. D’un côté, les stratégies mises en œuvres par certaines entreprises visaient à affaiblir leur(s) concurrent(s) direct(s) en subventionnant un standard antagoniste à celui sur lequel ce ou ces concurrents appuyaient leur offre (ex. : <abbr>IBM</abbr> ou <abbr>HP</abbr> subventionnant Linux pour concurrencer SUN, dominant sur le marché Unix). Mais, de l’autre, les logiciels fonctionnant rarement de façon isolée, il fallait assurer leur cohérence, leur « mise en compatibilité » (phénomène d’interrelation technologique) avec les logiciels (libres) standards d’Internet. Les entreprises qui dépendaient d’un standard pour réaliser leur activité (comme Sun, producteur de Java avec le serveur Web Apache) avaient, de plus, tout intérêt à ce que ce standard soit le plus ouvert possible, afin ne pas dépendre de la stratégie de l’entreprise qui le fournissait. Elles rejoignaient ainsi la logique d’autres entreprises qui ouvrent très volontairement les standards dont elles sont porteuses afin d’en favoriser l’adoption, comme l’avait fait Adobe concernant son standard d’impression PostScript. </p>
      <p> De telles motivations, classiques en informatique, peuvent expliquer le ralliement d’entreprises commerciales au monde du libre. Mais comme l’ont fait remarquer Genthon &amp; Phan <a epub:type="noteref" href="#note_17" id="ref_17"> <sup>[17]</sup></a>, le risque est grand que la participation de ces entreprises soit limitée au temps où elles trouvent un intérêt stratégique à affaiblir leurs concurrents. </p>
      <p> Le phénomène Unix va-t-il se reproduire ? C’est la thèse que défendaient Genthon &amp; Phan <a epub:type="noteref" href="#note_18" id="ref_18"> <sup>[18]</sup></a>, et c’est ce que craignait Horn <a epub:type="noteref" href="#note_19" id="ref_19"> <sup>[19]</sup></a>. Ils expliquaient que les entreprises risquaient de se réapproprier la production de ces logiciels soit en les fermant, comme l’a fait Apple, soit en publiant des versions de moins en moins compatibles de certains logiciels phares, comme peuvent le faire Red Hat ou, à l’époque, SuSE avec GNU/Linux <a epub:type="noteref" href="#note_20" id="ref_20"> <sup>[20]</sup></a>. D’autre part, comme l’explique Fitzgerald <a epub:type="noteref" href="#note_21" id="ref_21"> <sup>[21]</sup></a>, l’implication des entreprises dans les communautés du Libre peut changer leur objet, leur mode de fonctionnement et finalement décourager les participants volontaires. </p>
      <p> Il faut donc affiner l’analyse, en se demandant en quoi le Libre répond à des besoins non satisfaits par le système de production actuel et notamment pourquoi l’organisation coopérative pourrait être à nouveau la plus adaptée pour répondre aux besoins des utilisateurs et des industriels de l’informatique. Et pour cela, il est utile de comprendre pourquoi et comment les spécificités du mode de production du Libre sont susceptibles de fonder des avantages comparatifs sur le modèle dit propriétaire. </p>
    </section>

    <section epub:type="bodymatter subchapter">
      <h3 id="part2-6.2">6.2 Les modèles industriels du Libre</h3>
      <p> Au cours des années 1990, avec l’arrivée de l’Internet, la principale évolution technique en informatique était, bien sûr, la généralisation des réseaux informatiques, tant à l’intérieur des organisations (entendues ici comme les entreprises ou les institutions publiques) qu’entre ces organisations. La miniaturisation a aussi permis l’apparition d’une nouvelle gamme d’objets dits « nomades » (lecteurs de musique, téléphones mobiles, notamment smartphones). Ainsi, en un demi-siècle, on est passé d’un seul appareil, dédié à une tâche déterminée à l’avance et commune à l’ensemble de l’organisation, à plusieurs machines par individu, connectées entre elles et utilisées pour des tâches différentes, évolutives dans le temps. Mise en réseau, échange entre des systèmes hétérogènes, communication entre ces outils sont devenus cruciaux. </p> <p> Ainsi, la croissance de l’Internet, et la croissance des échanges extérieurs aux organisations ont fait des externalités de réseau le fondement des rendements croissants d’adoption. En d’autres termes chaque utilisateur bénéficie d’avantages liés au fait que d’autres utilisateurs ont déjà adopté les mêmes technologies. Les bénéfices de l’adoption d’une technologie sont donc croissants au fur et à mesure de son adoption par de nouveaux utilisateurs. </p>
      <p> Au sein de ces organisations utilisatrices, la demande est devenue de plus en plus hétérogène avec la mise en réseau des différents systèmes et la nécessité pour les utilisateurs travaillant dans l’entreprise de partager les mêmes outils. Les logiciels (et plus particulièrement les progiciels) doivent être adaptés aux besoins et aux connaissances de chaque individu, sans perdre l’avantage des économies d’échelle, donc de la normalisation des programmes sur lesquels la solution est fondée. Il devient alors logique que les entreprises utilisatrices recherchent des solutions plus ouvertes qui leur garantissent un plus grand contrôle dans la mesure où elles ne doivent pas faire face à une fragmentation des logiciels utilisés par leurs membres mais peuvent au contraire les intégrer dans un vaste ensemble. Ici, l’atout d’Internet n’est pas tant d’offrir un « protocole » pour permettre la transmission de données, car il en existait déjà, mais d’en offrir un suffisamment simple et souple qui puisse s’imposer comme un standard pour l’échange. </p>
      <p> En parallèle de cette évolution, les technologies de programmation ont évolué <a epub:type="noteref" href="#note_22" id="ref_22"> <sup>[22]</sup></a> : l’arrivée des langages de programmation orientés objet (C++, Java) a permis à des composants logiciels déjà développés d’être réutilisés. De là est née la notion de « logiciels modulaires » : l’idée est de développer un ensemble de petits programmes logiciels (modules ou composants logiciels), qui ont chacun une fonction spécifique. Ils peuvent être associés et utilisés sur n’importe quelle machine grâce à leurs interfaces de communication normalisées. Ce qui caractérise l’évolution technologique des logiciels est donc l’interdépendance croissante entre les logiciels, tandis que les composants logiciels qui sont ré-utilisés sont de plus en plus raffinés et spécialisés <a epub:type="noteref" href="#note_23" id="ref_23"> <sup>[23]</sup></a>. Ce système ne peut fonctionner que si les composants sont en effet réutilisables, c’est-à-dire si les producteurs s’accordent sur un mécanisme qui permette de normaliser les interfaces et de garantir, dans le temps, la stabilité de ces normes. </p>
      <p> Horn <a epub:type="noteref" href="#note_24" id="ref_24"> <sup>[24]</sup></a> défend l’idée que nous sommes entrés dans un nouveau mode de production : le « sur-mesure de masse », qui s’accompagne d’une augmentation de la part du service dans la vente de progiciels. La transformation d’<abbr>IBM</abbr> en une entreprise de « solution », ou de service, ou l’émergence de logiciels paramétrables comme les <abbr>ERP</abbr> en sont des exemples. Si l’on considère le passé, ces évolutions de la demande devraient, à leur tour, engendrer une évolution des modèles d’affaire et des modèles de production. Et en regard des évolutions de la demande, l’offre libre présente des avantages importants. </p>

      <h4 id="part2-6.2.1">6.2.1 Des avantages spécifiques au logiciel libre</h4>
      <p> Les avantages du logiciel libre sont particulièrement visibles dans la gestion de l’amélioration de la qualité et dans le respect des normes. </p>
      <h5>La qualité du logiciel</h5>
      <p> Plus que de simples produits de la recherche publique, les programmes libres étaient, d’abord et avant tout, des outils développés par des utilisateurs-experts, au sens que les utilisateurs et les développeurs ne formaient qu’une seule catégorie d’acteurs, pour répondre à leurs propres besoins. Ainsi, la faible qualité des logiciels fermés et, surtout, la difficulté de les faire évoluer sont les raisons fondamentales à l’origine de l’initiative de Richard Stallman de création de la<i lang="en" xml:lang="en" class="droit"> Free Software Foundation</i> <a epub:type="noteref" href="#note_25" id="ref_25"> <sup>[25]</sup></a>. Ces utilisateurs-experts sont à l’origine de nombreuses initiatives de projets de développement de logiciels libres (parmi lesquels Linux, Apache ou Samba). Dans le cas de ces logiciels phares, cette organisation a obtenu des résultats remarquables en terme de qualité et de rapidité d’amélioration, notamment parce que la libre disponibilité des sources permettait et permet toujours à ces utilisateurs-experts de tester les logiciels, d’étudier leur code et de corriger eux-mêmes les erreurs qu’ils y trouvent. </p>
      <p> Les autres programmes libres largement distribués sont des outils de développement de programme (compilateurs, tels que <abbr>GCC</abbr>, un des premiers outils développé par la <abbr>FSF</abbr>, environnement de développement, comme Emacs ou Eclipse, dont <abbr>IBM</abbr> est à l’origine). Là encore, on s’adresse d’abord aux professionnels de l’informatique qui sont capables et intéressés par le développement ou l’adaptation de leurs outils de travail. </p>
      <h5 class="subsubsectionHead"><a id="x1-720006.2.1" class="calibre11"></a>Le respect des normes</h5>
      <p> L’organisation coopérative du travail, le fait que les logiciels soient souvent une collection de petits projets évoluant simultanément, rendent également nécessaire que l’interface de communication entre ces projets/programmes soit publique et « normalisée » (c’est-à-dire respecte des formats publics dont l’évolution est définie collectivement). </p>
      <p> Le code ouvert facilite la vérification de cette compatibilité et, si besoin est, la modification des programmes. Il est également remarquable de constater que, dans le but de ne pas renouveler les divergences de versions, ainsi qu’il en avait été pour Unix, les entreprises informatiques ont mis en place une organisation chargée de veiller à la compatibilité des différentes versions des distributions de Linux, la Linux Foundation, qui emploie entre autres le créateur de Linux, Linus Torvalds. Celle-ci publie, notamment, des recommandations techniques sur la façon de programmer les applications afin qu’elles puissent travailler avec ce système dans le même esprit que le standard POSIX, c’est-à-dire dans une optique de systèmes ouverts <a epub:type="noteref" href="#note_26" id="ref_26"> <sup>[26]</sup></a>. Le fait que les entreprises utilisent des programmes libres peut être vu comme permettant de coordonner collectivement la création de composants (de « briques » logiciels) qui soient à la fois fiables et, surtout, « normalisés ». Jusqu’à présent, la création collective d’une telle base de composants « normalisés » a fait défaut à l’industrie informatique, même si des standards propriétaires, comme Windows, ont émergé <a epub:type="noteref" href="#note_27" id="ref_27"> <sup>[27]</sup></a>. </p>
      <p> Nous proposons maintenant de détailler comment les entreprises s’appuient sur ces organisations de production collective pour construire leur stratégie industrielle. </p>

      <h4 id="part2-6.2.2">6.2.2 Des modèles basés sur les spécificités du Libre</h4>
      <p> Selon les secteurs industriels, comme nous l’avons montré <a epub:type="noteref" href="#note_28" id="ref_28"> <sup>[28]</sup></a>, le degré d’implication dans le logiciel libre est très varié, il s’appuie toutefois sur des motivations industrielles profondes et de long terme.</p>

      <table>
        <caption>Degré d'implication des acteurs dans le logiciel libre, suivant les secteurs informatiques (Jullien &amp; Zimmermann, 2009).</caption>
        <thead>
          <tr>
            <th scope="col">Degré d'implication</th>
            <th scope="col">Force motrice</th>
            <th scope="col">Actif</th>
            <th scope="col">Faible (assure la compatibilité)</th>
            <th scope="col">Très faible à nulle</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <th scope="row">Logiciel</th>
            <td>Logiciels techniques (Producteurs de composants logiciels et d'outils de développement) et architecteurs (Assembleurs de système d'information)</td>
            <td>Éditeurs de systèmes d'exploitation (<abbr>OS</abbr>)</td>
            <td></td>
            <td></td>
          </tr>
          <tr>
            <th scope="row">Matériel</th>
            <td></td>
            <td>Serveurs</td>
            <td>Portables de Haute Qualité (<abbr>PC</abbr>, portables de haut de gamme, <abbr>PHQ</abbr>), Outils de Communication Personnels (<abbr>PDA</abbr>, mobiles, <abbr>OCP</abbr>), (potentiel)</td>
            <td>Portables à Bas Coût (<abbr>PC</abbr> portables d'entrée de gamme<a epub:type="noteref" href="#note_table1" id="ref_table1"> <sup>[†]</sup></a>, <abbr>PBC</abbr>)</td>
          </tr>
        </tbody>
      </table>

      <p> Ces différences s’expliquent par les caractéristiques de ces sous-marchés, particulièrement le régime de concurrence et les compétences des clients-utilisateurs des produits. </p>
      <p> Tous les segments sont caractérisés par des régimes de concurrence fortement imparfaits, dus à divers « rendements croissants d’adoption » <a epub:type="noteref" href="#note_29" id="ref_29"> <sup>[29]</sup></a> : économies d’échelle en production, forts coûts fixes, notamment dus à la R&amp;D, interrelations technologiques, effets d’apprentissage). Un seul marché peut être considéré comme quasiment monopolistique (celui des systèmes d’exploitation pour les <abbr>PC</abbr>), les autres étant plutôt des oligopoles, avec, dans tous les cas, de fortes barrières à l’entrée. </p>
      <p> À l’intérieur de ces différents oligopoles, les stratégies de différentiation jouent généralement un rôle important. Le marché des ordinateurs à bas coûts (<abbr>PBC</abbr>), caractérisé par une concurrence en prix, est un marché relativement neuf, une différentiation verticale (par les prix) du marché traditionnel des <abbr>PC</abbr>. Dans les autres cas, les stratégies industrielles reposent plutôt soit sur de la différentiation horizontale (intégration de nouvelles caractéristiques ou outils, comme dans les téléphones mobiles), soit sur de la segmentation de marché grâce aux formats propriétaires et des stratégies d’intégration matériel-logiciel-contenu, comme dans les consoles de jeu. </p>
      <p> Dans de tels marchés, un nouvel entrant doit proposer une différentiation significative, soit verticale, comme un meilleur ratio performance/prix (des portables performants moins chers ou des serveurs/des portables de haute qualité aux capacités de calcul supérieures pour le même prix), soit horizontale (des caractéristiques nouvelles, valorisées par au moins une partie des utilisateurs, comme l’a fait Samsung sur le marché des téléphones mobiles avec le téléphone à clapet). </p>
      <p> Sur ces marchés technologiques, et particulièrement sur le logiciel, les utilisateurs ont un double rôle, fonction de leur potentiel économique (pouvoir d’achat, ou de marché), mais aussi technique (capacité à comprendre et à intervenir sur la solution développée). D’un côté du spectre, les clients des grands intégrateurs, comme Cap Gemini ou <abbr>IBM</abbr> , que nous appellerons par la suite les « architecteurs » de services, sont souvent de grandes entreprises, avec de fortes compétences techniques. À l’autre extrémité, les vendeurs de portables d’entrée de gamme s’adressent à un marché de masse où chaque individu a un très faible pouvoir de marché et peu de compétences en moyenne. En croisant les compétences techniques (des utilisateurs « naïfs », sans compétence, aux utilisateurs « von Hippel » (<abbr>VH</abbr>), en référence à von Hippel <a epub:type="noteref" href="#note_30" id="ref_30"> <sup>[30]</sup></a>, c’est-à-dire des utilisateurs-innovateurs, capables de co-développer les technologies, en passant par les utilisateurs « Kogut-Metiu » (<abbr>KM</abbr>), exigeants techniquement, mais ne développant pas <a epub:type="noteref" href="#note_31" id="ref_31"> <sup>[31]</sup></a> et le type de marché on obtient une segmentation plus fine des différents sous-marchés.</p>

      <table class="table2">
        <caption>
          Les sous-marchés des <abbr>TIC</abbr> en fonction des capacités techniques des utilisateurs et du régime de concurrence. (Jullien &amp; Zimmermann 2009)</caption>
        <thead>
          <tr>
            <td></td>
            <th scope="row">Monopole</th>
            <th scope="row">Oligopole basé sur les prix</th>
            <th scope="row">Oligopole horizontal</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <th rowspan="2" id="naif">Naïf</th>
            <td headers="naif"><abbr>OS</abbr> pour portables</td>
            <td headers="naif">Portables bas coût</td>
            <td headers="naif">lecteurs</td>
          </tr>
          <tr>
            <td rowspan="3"></td>
            <td rowspan="6"></td>
            <td rowspan="2" headers="naif KM">Outils de communication personnels</td>
          </tr>
          <tr>
            <th id="KM" rowspan="3">Kogut-Metiu (<abbr>KM</abbr>)</th>
          </tr>
          <tr>
            <td headers="KM">Portables haute qualité</td>
          </tr>
          <tr>
            <td rowspan="2" headers="KM VH"><abbr>OS</abbr> pour serveurs <abbr>PC</abbr></td>
            <td rowspan="2" headers="KM VH">Serveurs</td>
          </tr>
          <tr>
            <th id="VH" rowspan="2">Von Hippel (<abbr>VH</abbr>)</th>
          </tr>
          <tr>
            <td></td>
            <td headers="VH">Logiciels techniques et architecteurs</td>
          </tr>
        </tbody>
      </table>

      <p> Les compétences de ces utilisateurs, et leur pouvoir de marché, expliquent l’intégration de logiciels libres et l’implication des producteurs dans le développement des logiciels libres, motivés par une différentiation significative (le plus souvent verticale). Celle-ci peut permettre, pour les entrants, de surmonter les barrières à l’entrée créées par le fonctionnement oligopolistique ou, au contraire, pour les firmes installées, de perpétuer leur position sur le marché. </p>
      <p> Ainsi, les éditeurs de distribution Linux ont été parmi les premiers acteurs commerciaux à entrer sur le marché des systèmes d’exploitation pour <abbr>PC</abbr> en utilisant les logiciels libres (1995 pour Red Hat). Cela semblait une évidence. Il s’agit d’un marché de masse, avec une concurrence basée significativement sur les prix. En fait, peu d’utilisateurs sont assez compétents pour installer un <abbr>OS</abbr> <a epub:type="noteref" href="#note_32" id="ref_32"> <sup>[32]</sup></a> alternatif (les utilisateurs naïfs y sont majoritaires), et les machines sont achetées avec un <abbr>OS</abbr> déjà installé et <em>payé</em>. Le marché ne s’est pas développé pour l’instant. Les producteurs de portables pourraient changer la donne, pour diminuer la position dominante de Microsoft. Sur le marché des portables à bas coût, installer un <abbr>OS</abbr> libre peut être considéré comme une manière de réduire les prix, donc d’augmenter la part de marché de l’entreprise et donc d’élargir la base de marché. Mais l’initiative viendrait du constructeur et non de l’utilisateur. Comme, dans ce cas, la raison pour utiliser du logiciel libre est de proposer le prix le plus bas possible, les entreprises n’investiront pas dans le développement plus que l’effort nécessaire pour adapter le logiciel à leur(s) produit(s) : cela augmenterait leur coût. Dans ce cas, le logiciel libre peut être considéré comme un bien gratuit, un <i lang="en" xml:lang="en">freeware</i>. Bien sûr, on pourrait avancer que ces stratégies ont un caractère opportuniste <a epub:type="noteref" href="#note_33" id="ref_33"> <sup>[33]</sup></a> et le risque est grand de démotiver les personnes les plus engagées dans les communautés, qui constatent les bénéfices que d’autres réalisent en puisant dans leur travail volontaire <a epub:type="noteref" href="#note_34" id="ref_34"> <sup>[34]</sup></a>. Toutefois, en adoptant des produits FLOSS, comme le système d’exploitation Linux, la suite bureautique Libre Office, ou le navigateur Web Firefox, ces entreprises participent à l’expansion du réseau des utilisateurs. Dans un régime de concurrence dans laquelle la bataille pour les externalités de réseau et les normes joue un rôle crucial, cela peut donner une forte impulsion aux logiciels libres, permettant à ces entreprises de gagner au moins la neutralité de la communauté si ce n’est son approbation. </p>
      <p> Sur le marché alors émergeant du système d’exploitation pour serveurs <abbr>PC</abbr>, les choses ont été différentes. La plupart des utilisateurs (de type <abbr>VH</abbr> ou <abbr>KM</abbr>) savaient installer et configurer un système d’exploitation. Un système libre leur donnait accès à un système d’exploitation du type Unix, mais moins cher, plus ouvert et plus adaptable que ce qu’ils pouvaient trouver sur le marché Unix traditionnel où ils s’approvisionnaient habituellement. Cela a permis aux éditeurs de systèmes d’exploitation libres d’entrer sur le marché (mais ce n’est pas le même marché). Entre les deux, on trouve le marché des portables haut de gamme (<abbr>PHQ</abbr>), où les utilisateurs sont plus compétents que sur le marché <abbr>PBC</abbr>, mais avec un système d’exploitation pré-installé sur la machine. Le constructeur reste l’acteur qui pourra décider du changement, en tenant compte, le cas échéant, des demandes des utilisateurs (cf. l’exemple de DELL qui explore l’installation et la vente de machines avec Linux installé de façon « native », sous la pression/demande de ses utilisateurs). Mais, là encore, ce n’est pas l’éditeur de la distribution qui fera évoluer ce marché, c’est le producteur ou le distributeur du matériel. </p>
      <p> Quand on regarde la colonne « oligopole horizontal », qui est celle des producteurs de matériels, il est clair que plus les utilisateurs sont qualifiés, plus le concept de logiciel libre et les offres industrielles correspondantes ont des chances de diffuser. </p>
      <p> À un extrême, les formats propriétaires ont pu maintenir une intégration forte entre matériel-logiciel-contenu sur le segment des consoles de jeu, parce que les jeux développés pour Linux n’ont pas toujours la qualité de ceux développés pour les standards propriétaires (PS2/3, Xbox...). C’est aussi le cas, à un niveau un peu plus faible sur le segment des « players » musicaux : sur ce segment, le standard <abbr>MP3</abbr> (ou <abbr>Ogg</abbr>) fait qu’une nouvelle entrée est toujours possible. </p>
      <p> À l’autre extrême, on (re-)trouve le marché des serveurs, où les producteurs proposaient des solutions propriétaires (matériel et Unix propriétaires liés). Sur ce marché, les fournisseurs travaillent avec des utilisateurs <abbr>VH</abbr>, qui peuvent être des contributeurs de premier ordre dans le contexte d’une ouverture libre. Ainsi, le développement des serveurs <abbr>PC</abbr> a permis à certains de ces utilisateurs de contourner le problème de l’intégration matériel-logiciel (<i lang="en" xml:lang="en">bundling</i>) ; utiliser Linux permettait de construire une solution moins onéreuse (avantage vertical), en réutilisant le portefeuille des programmes Unix (existence d’un contenu). Sur la base de la révélation de cette demande, certaines entreprises, comme Cobalt <a epub:type="noteref" href="#note_35" id="ref_35"> <sup>[35]</sup></a>, ont cherché à élargir ce marché des serveurs <abbr>PC</abbr> sous Unix, vers les utilisateurs <abbr>KM</abbr>, sensibles au prix, mais aussi à la qualité d’un serveur <abbr>PC</abbr>, utilisant Linux. Rapidement, les acteurs majeurs d’Unix, pour les raisons expliquées plus haut, ont aussi développé de telles offres, limitant par là même les possibilités de différentiation verticale, donc les entrées. </p>
      <p> Les outils personnels de communication (aujourd’hui les smartphones) présentent un cas intermédiaire avec des utilisateurs moins « techniques » (<abbr>KM</abbr>+N), et un degré d’implication des acteurs commerciaux faible, seulement préoccupés par des questions de compatibilité. Depuis le début des années 2000, on assiste à une ouverture des architectures (et des fonctionnalités) sur ce marché, en parallèle au système intégré proposé par Apple avec son iPhone. Il semble que le cœur du métier (et de la différenciation) de ces constructeurs ne soit pas le système d’exploitation, mais la maîtrise du <i lang="en" xml:lang="en" class="droit">design</i> et de la production du matériel, intégrant toujours plus de fonctions, ainsi que l’ergonomie logicielle et matérielle des services proposés. En l’absence d’un standard de fait sur le système d’exploitation, Linux, ou plutôt son adaptation par Google, Android, apparaît comme un choix rationnel pour les constructeurs : il est gratuit, sous licence libre, et soutenu par une communauté d’utilisateurs-développeurs (externalisation d’une partie de la R&amp;D et du développement), même si Google reste prépondérant dans le développement. Enfin, l’ouverture et le respect des standards fait qu’il est plutôt facile à adapter. Cela permet ainsi aux constructeurs de réduire leurs coûts et de se concentrer sur leur cœur de métier. Il est amusant de constater que les acteurs des smartphones semblent rejouer le régime de concurrence des ordinateurs personnels des années 1980, cette fois-ci avec un système libre. </p>
      <p> Pour finir, sur les marchés logiciels où les utilisateurs sont plutôt de type <abbr>VH</abbr> (outils techniques et architecteurs), beaucoup d’entreprises se sont déjà tournées vers le logiciel libre. Cela représente un moyen efficace pour elles de se différencier verticalement, en termes de performances (qualités techniques du produit, meilleur système de gestion des retours utilisateurs...). Ces stratégies ont été initiées par des entreprises qui n’occupaient pas une position dominante sur le marché, nouveaux entrants (comme MySQL dans les bases de données) ou en difficulté (comme <abbr>IBM</abbr> avec l’outil de développement Eclipse). La stratégie libre leur a permis de réduire les coûts de développement en intégrant les contributions des utilisateurs <abbr>VH</abbr>, mais aussi de diminuer leurs coûts marketing en tirant parti de la dynamique de diffusion virale dans cette population d’utilisateurs qualifiés.</p>

      <table>
        <caption>
          Le rôle décisif des utilisateurs. Source : à partir de Jullien-Zimmermann (2009)
        </caption>
        <thead>
          <tr>
            <th scope="col">Type d'utilisateur</th>
            <th scope="col">Régime de concurrence</th>
            <th scope="col">Acteurs/ « produits »</th>
            <th scope="col">Degré d'implication</th>
            <th scope="col">Motivations pour se tourner vers le logiciel libre</th>
            <th scope="col">But</th>
          </tr>
        </thead>
        <tbody>
          <tr>
            <th scope="row"><abbr>VH</abbr></th>
            <td>Oligopole avec différentiation horizontale</td>
            <td>Logiciels techniques et architecteurs</td>
            <td>Force principale</td>
            <td>Qualité intrinsèque et assurée dans le temps des logiciels + signal</td>
            <td>Entrée (MySQL) parts de marché (différentiation verticale)</td>
          </tr>
          <tr>
            <th scope="row"><abbr>VH</abbr></th>
            <td>Oligopole « clivé »</td>
            <td>Constructeurs de serveurs</td>
            <td>Actif</td>
            <td>Qualité et ouverture dans le monde Unix</td>
            <td>Réponse au développement des serveurs <abbr>PC</abbr> (sous Windows)</td>
          </tr>
          <tr>
            <th scope="row"><abbr>KM</abbr></th>
            <td>Monopole fort</td>
            <td>Éditeurs de systèmes d'exploitation</td>
            <td>Actif</td>
            <td>Capacité à proposer un système d'exploitation Unix + Standards ouverts</td>
            <td>Contournement des barrières à l'entrée</td>
          </tr>
          <tr>
            <th scope="row"><abbr>KM</abbr></th>
            <td>Oligopole avec différentiation horizontale</td>
            <td>Constructeurs de portable de haut de gamme</td>
            <td>Faible (au niveau des capacités d'absorption)</td>
            <td>Qualité + outils, applications ouvertes</td>
            <td>Différentiation verticale (prix/performances)</td>
          </tr>
          <tr>
            <th scope="row"><abbr>KM</abbr>+N</th>
            <td>Oligopole avec différentiation horizontale</td>
            <td>Outils de Communication Personnels</td>
            <td>Faible (compatibilité)</td>
            <td>Actifs complémentaires</td>
            <td>Permet de se concentrer sur les compétences « cœurs »</td>
          </tr>
          <tr>
            <th scope="row">N*</th>
            <td>Oligopole « clivé »</td>
            <td>Lecteurs (de musique)</td>
            <td>Faible (compatibilité)</td>
            <td>Délier matériel, logiciel et contenu</td>
            <td>Contournement des barrières à l'entrée</td>
          </tr>
          <tr>
            <th scope="row">N</th>
            <td>Oligopole basé sur les prix</td>
            <td>Constructeurs de portable de bas de gamme</td>
            <td>Faible à nul</td>
            <td>Prix</td>
            <td>Concurrence en prix</td>
          </tr>
          <tr>
            <td colspan="6">* Mais <abbr>VH</abbr> nécessaire pour avoir des contenus ouverts </td>
          </tr>
        </tbody>
      </table>

      <h4 id="part2-6.2.3">6.2.3 Analyse</h4>
      <p> Le premier modèle est celui de la coopération autour d’un logiciel « plate-forme », ce que Romer <a epub:type="noteref" href="#note_36" id="ref_36"> <sup>[36]</sup></a> a appelé un « bien public industriel », comme Linux, ou Apache. Ces logiciels jouent un rôle clef dans la production des produits informatiques auxquels ils fournissent un socle. À cause des interrelations technologiques, chaque constructeur de matériel ou de logiciel doit s’assurer que ces logiciels sont compatibles avec les produits qu’il développe. La coopération prend alors le plus souvent la forme d’un consortium dont l’objectif est de coproduire les briques de base au coût le plus faible, et de veiller à ce qu’elles soient adaptées par chaque participant à leurs besoins, tout en assurant une cohérence d’ensemble (production d’une norme). </p>
      <p> Cette logique correspond à l’origine à une situation de collaboration entre pairs, entre professionnels de l’informatique qui ont initié une telle pratique. Mais elle réunit de plus en plus d’entreprises, avec les investissements d’<abbr>IBM</abbr>, de Red Hat, ou de SUN/Oracle, dans Linux ou Apache. Notons aussi que, pour la plupart de ces plates-formes, des « fondations » dédiées participent étroitement au contrôle du projet <a epub:type="noteref" href="#note_37" id="ref_37"> <sup>[37]</sup></a>. </p>
      <p> Le second modèle est celui de la « capacité technique entretenue », pour reprendre les analyses de Jean Gadray <a epub:type="noteref" href="#note_38" id="ref_38"> <sup>[38]</sup></a>. Autour d’un outil technique innovant, évolutif, le producteur (marchand) organise la collaboration avec ses utilisateurs-innovateurs (entreprise clientes, développeurs), bref des utilisateurs sources d’innovation, au sens de Von Hippel <a epub:type="noteref" href="#note_39" id="ref_39"> <sup>[39]</sup></a>. Dans une relation « symbiotique » pour reprendre les termes de Dahlander et Magnusson <a epub:type="noteref" href="#note_40" id="ref_40"> <sup>[40]</sup></a>, le producteur agrège les contributions, assure la stabilité de l’outil, aide les développeurs à l’utiliser. Les utilisateurs-développeurs (éventuellement des entreprises utilisant l’outil), en fournissant leurs innovations, sont ainsi assurés que leurs besoins seront pris en compte plus rapidement, et intégrés-maintenus dans le produit (ce qui est un point fondamental de la diminution de leur coût selon Von Hippel). Le producteur vend ce que nous avons appelé les « trois A » (assurance qualité, adaptation (rapide) aux besoins des utilisateurs, et assistance à l’utilisation <a epub:type="noteref" href="#note_41" id="ref_41"> <sup>[41]</sup></a>). MySQL AB, producteur de logiciel libre de bases de données est un archétype de ce type d’acteur. Ce modèle n’est pas en soi très différent du modèle traditionnel des producteurs d’outils informatiques, comme Oracle. Mais l’ouverture permet sans doute un meilleur retour de la part des utilisateurs, et donc une plus forte externalisation des coûts de développement, tout en assurant une évolution plus rapide du logiciel. Comme l’actif spécifique de ces entreprises repose sur la gestion de l’édition de logiciels, celles-ci doivent investir dans le logiciel qu’elles modifient, et l’implication des développeurs salariés de l’entreprise est souvent concentrée sur son produit (libre). </p>
      <p> Entre ces deux stratégies, on trouve les entreprises de services. La seule incertitude de l’intégration des logiciels libres dans leur modèle d’affaires découle de la disponibilité et la qualité des composants, qualité qu’ils doivent être capable d’évaluer, et qui passe par une participation aux communautés de développement, comme l’ont montré Dahlander et Magnusson <a epub:type="noteref" href="#note_42" id="ref_42"> <sup>[42]</sup></a>. Cette nécessité d’une évaluation et de contrôle va croissante avec l’importance du composant dans les solutions proposées par l’entreprise ou demandées par ses clients. On peut même formuler l’hypothèse que plus les clients sont qualifiés, plus l’entreprise doit maîtriser la technologie, en raison du niveau croissant de complexité des rétroactions et de la demande. C’est ce que Dahlander et Magnusson <a epub:type="noteref" href="#note_43" id="ref_43"> <sup>[43]</sup></a> ont appelé une « approche commensalistique ». Cela correspond à l’affirmation plus générale de Cohen et Levinthal <a epub:type="noteref" href="#note_44" id="ref_44"> <sup>[44]</sup></a> sur la nécessité pour une entreprise de faire des efforts internes de R &amp; D une condition préalable à l’absorption de technologie extérieure. </p>
      <p> Nous considérons que cela reflète un changement dans les technologies utilisées, donc dans les actifs complémentaires que ces entreprises ont besoin de gérer, mais pas vraiment dans leurs compétences de base. Les entreprises « architecteurs » traditionnelles ne sont pas forcément impliquées dans les développements libres car elles n’utilisent pas ces technologies. Mais elles ont d’autres processus, comparables, pour surveiller l’évolution de l’actif complémentaire, les technologies qu’elles utilisent. Ainsi, elles peuvent participer à des sessions de formation des éditeurs, ou conclure des « alliances mondiales » avec leurs principaux partenaires, comme le fait <a href="http://www.capgemini.com">Cap Gemini</a>. </p>
      <p> Dans le deuxième modèle, il semble que la licence joue un rôle important : l’adoption de la licence GNU <abbr>GPL</abbr> est un engagement fort du producteur à ne pas s’approprier les contributions des utilisateurs, et à en faire profiter tous les utilisateurs. Une autre licence pourrait générer un certain doute et limiter la confiance et l’implication des développeurs. Ainsi le projet de navigateur libre, basé sur Nestcape n’a vraiment fonctionné que lorsque l’entreprise a publié son code sous une licence compatible avec la GNU <abbr>GPL</abbr> et la licence du logiciel Qt (<abbr>QPL</abbr>), édité par Trolltech, a évolué vers la GNU <abbr>GPL</abbr> sous la pression des développeurs-utilisateurs. Dans ce modèle, paradoxalement, la GNU <abbr>GPL</abbr> apparaît aussi un moyen de contrôler la concurrence : si un concurrent veut s’approprier le logiciel pour en faire une version différente, il lui faudra publier ses améliorations, qui pourront être aussitôt intégrées dans le logiciel originel. </p>
      <p> Dans le premier modèle, la licence semble jouer un rôle moins important. Certains logiciels, comme Apache, ou Bind ne sont pas protégés par des licences obligeant le reversement des contributions, comme la GNU <abbr>GPL</abbr>. Cela peut sembler paradoxal, car dans le cas de la collaboration entre entreprises, la GNU <abbr>GPL</abbr> pourrait renforcer cette collaboration, rendant plus difficile la défection. Le choix de ces licences s’explique par le fait que ces logiciels ont souvent été produits par les universités américaines, et donc traditionnellement mis à disposition de tous (licences <abbr>BSD</abbr>). D’autre part, le fait que ces logiciels soient co-développés rend plus difficile le changement de licence (qui a le pouvoir de le décider ?) En réalité, cette question du choix de licence n’a que peu d’impact sur la coopération car la dynamique d’innovation suffit à rendre la défection trop coûteuse : faire défection signifie assurer soi-même la mise au point et la maintenance de ses propres améliorations, vérifier à chaque fois qu’il y a une nouvelle version qu’elles restent compatibles avec celle-ci, et risquer de devoir faire face à des choix incompatibles avec les produits que l’on vend. </p>
    </section>

    <section epub:type="bodymatter subchapter">
      <h3 id="part2-6.3">6.3 Conclusion</h3>
      <p> Il faut souligner que l’émergence de ce modèle du logiciel libre signifie l’intégration de l’ensemble de la chaîne de production, de la chaîne de valeur, dans le développement des logiciels : pas seulement les producteurs-vendeurs, mais aussi les utilisateurs-développeurs, les entreprises qui intègrent le composant dans leur produit, et la recherche. Ceci est rendu possible grâce à une structuration forte de l’organisation de production, basée sur des choix techniques (production modulaire), et soutenu par une utilisation originale du droit d’auteur (à travers des licences spécifiques). Ensuite, selon le segment ou le type de logiciel concerné, la place du logiciel dans la chaîne de production, la place des acteurs privés, et celle des utilisateurs peut fortement varier, et donc l’importance du recours au libre, mais en fonction de préoccupations industrielles et marketing classiques. Le renouveau de la coopération dans le développement logiciel, comme sa quasi-disparition dans les années 1970, s’explique par les mêmes mécanismes, évolution de la demande, évolution des technologies, qui changent le modèle de production industriel. Ce mode d’organisation de production libre qui s’affirme aujourd’hui sur des bases renouvelées apparaît bien comme celui du « monde Internet », tel qu’il a commencé à s’esquisser autour du concept du Web 2.0. </p>
    </section>

    <aside epub:type="appendix" class="epub-appendix">
      <h3>Références</h3>
      <ol>
        <li><span class="auteur"><a href="http://www.santafe.edu/arthur">Arthur</a></span>, W. Brian, « <i lang="en" xml:lang="en" class="droit">Competing technologies, increasing returns and lock-in by historical events : The dynamics of allocations under increa sing returns to scale</i> », dans : <cite lang="en" xml:lang="en">Economic Journal 99</cite> (1989), p. 116–131.</li>
        <li><span class="auteur">Cohen</span>, Wesley M. et Daniel A. <span class="auteur">Levinthal</span>, « <i lang="en" xml:lang="en" class="droit">Innovation and Learning : The Two Faces of R&amp;D</i> », dans : <cite lang="en" xml:lang="en">Economic Journal 99</cite> (1989), p. 569–596.</li>
        <li><span class="auteur">Dahlander</span>, Linus et Mats G. <span class="auteur">Magnusson</span>, « <i lang="en" xml:lang="en" class="droit">How do Firms Make Use of Open Source Communities ?</i> », dans : <cite lang="en" xml:lang="en">Long Range Planning 41</cite> (2008), p. 629–649.</li>
        <li>– « <i lang="en" xml:lang="en" class="droit">Relationships Between Open Source Software Companies and Communities : Observations from Nordic Firms</i> », dans : <cite lang="en" xml:lang="en">Research Policy 34</cite> (2005), p. 481–493.</li>
        <li><span class="auteur">Dang Nguyen</span>, Godefroy et Christian <span>Genthon</span>, « Les perspectives du secteur des TIC en Europe », dans : <cite><a href="http://www.marsouin.org">Cahiers de Recherche Marsouin 4</a></cite> (2006).</li>
        <li><span class="auteur">réan</span>, Gérard, <cite>L’industrie informatique, structure, économie, perspectives</cite>, Paris : Masson, 1996.</li>
        <li><span class="auteur">Fitzgerald</span>, Brian, « <i lang="en" xml:lang="en" class="droit">The transformation of open source software</i> », dans : <a href="http://ulir.ul.ie/handle/10344/92"><cite lang="en" xml:lang="en">MIS Quarterly 30.3</cite></a> (2006), p. 587–598.</li>
        <li><span class="auteur">Foray</span>, Dominique, Sylvie <span class="auteur">Thoron</span> et Jean-Benoît <span class="auteur">Zimmerman</span>, « <i lang="en" xml:lang="en" class="droit">Open software : knowledge openness and cooperation in cyberspace</i> », dans : <cite lang="en" xml:lang="en">Internet and digital economics : Principles, methods and applications</cite>, sous la dir. d’Eric <span class="auteur">Brousseau</span> et Nicolas <span class="auteur">Curien</span>, New York : <cite lang="en" xml:lang="en">Cambridge University Press</cite>, 2007, p. 368–390.</li>
        <li><span class="auteur">Gadray</span>, Jean, <cite>Socio-économie des services</cite>, Paris : La Découverte, 2003.</li>
        <li><span class="auteur">Genthon</span>, Christian, <cite>Croissance et crise de l’industrie informatique mondiale</cite>, Paris : Syros, 1995.</li>
        <li><span class="auteur">Genthon</span>, Christian et Denis <span>Phan</span>, « Les logiciels libres : un nouveau modèle ? », dans : <cite>Terminal 80</cite> (1999), p. 167–188.</li>
        <li><span class="auteur">Gray</span>, Pamelai A., <cite lang="en" xml:lang="en">Open systems : a business strategy for the 1990’s</cite>, London : McGraw-Hill, 1991.</li>
        <li><span class="auteur">Hippel</span>, Eric von, <cite lang="en" xml:lang="en">The Sources of Innovation</cite>, <i lang="en" xml:lang="en" class="droit">Oxford : Oxford University Press</i>, 1994.</li>
        <li><span class="auteur">Horn</span>, François, <cite>L’économie des logiciels</cite>, Paris : La Découverte, 2004.</li>
        <li><span class="auteur">Jullien</span>, Nicolas et Jean-Benoît <span class="auteur">Zimmermann</span>, « <i lang="en" xml:lang="en" class="droit">Firms’ contribution to open-source software and the dominant user’s skill</i> », dans : <cite lang="en" xml:lang="en">European Management Revue 6</cite> (2009), p. 130–139.</li>
        <li><span class="auteur">Kogut</span>, Bruce et Anca <span class="auteur">Metiu</span>, « <i lang="en" xml:lang="en" class="droit">open Source Software Development and Distributed Innovation</i> », dans : <cite lang="en" xml:lang="en"><a href="http://oxrep.oxfordjournals.org/content/17/2/248">Oxford Review of Economic Policy 17.2</a></cite> (2001), p. 248–264.</li>
        <li><span class="auteur">Lakhani</span>, Karim R. et Robert G. <span class="auteur">Wolf</span>, « <i lang="en" xml:lang="en" class="droit">Why Hackers Do What They Do : Understanding Motivation and Effort in Free/Open Source Software Projects</i> », dans : <cite lang="en" xml:lang="en">Perspectives on Free and Open Source Software</cite>, sous la dir. de Joseph <span class="auteur">Feller</span> et al., Cambridge, Mass. : The <abbr lang="en" xml:lang="en">MIT</abbr> Press, 2007, p. 3–22.</li>
        <li><span class="auteur">Langlois</span>, R. N. et D. C. <span class="auteur">Mowery</span>, « <i lang="en" xml:lang="en" class="droit">The Federal Goverment Role in the Development of the U.S. Software Industry : An Assessment</i> », dans : <cite lang="en" xml:lang="en">The International Computer Software Industry : A Comparative Study of Industry Evolution and Structure</cite>, sous la dir. de D. C. <span>Mowery</span>, Oxford : <i lang="en" xml:lang="en" class="droit">Oxford University Press</i>, 1996.</li>
        <li><span class="auteur">McKusick</span>, Marshalli K., « <i lang="en" xml:lang="en" class="droit">Twenty Years of Berkeley Unix. From AT&amp;T-Owned to Freely Redistributable</i> », dans : <cite lang="en" xml:lang="en">Open Sources : Voices from the Open Source Revolution</cite>, sous la dir. de Chris <span class="auteur">DiBona</span>, Sam <span class="auteur">Ockman</span> et Marc <span class="auteur">Stone</span> , Sebastopol, <abbr>CA</abbr> : O’Reilly, 1999.</li>
        <li><span class="auteur">Pouzin</span>, Louis, « <i lang="en" xml:lang="en" class="droit">The Cyclades computer network</i> », dans : <cite><abbr>ICCC 2</abbr></cite> (1982).</li>
        <li><span class="auteur">Romer</span>, Pauli M., « <i lang="en" xml:lang="en" class="droit">The economics of new ideas and new goods</i> », dans : <cite lang="en" xml:lang="en">Annual Conference on Development Economics</cite>, Washington D. C. : Banque Mondiale, 1993.</li>
        <li><span class="auteur">Rosenberg</span>, Nathan, <cite lang="en" xml:lang="en">Inside the Black Box : Technology and Economics</cite>, Cambridge, <abbr>MA</abbr> : <i lang="en" xml:lang="en" class="droit">Cambridge University Press</i>, 1983.</li>
        <li><span class="auteur">Zimmermann</span>, Jean-Benoît, « L’industrie du logiciel, de la protection à la normalisation », dans : <cite>Changement institutionnel et changement technologique : évaluation, droits de propriété intellectuelle, système national d’innovation</cite>, sous la dir. de Baslé <span class="auteur">Dufour</span>, <abbr>CNRS</abbr> Éditions, Paris, 1995, p. 181–207.</li>
      </ol>
    </aside>

    <aside epub:type="footnotes" class="epub-footnotes">
      <ol>
        <li> <a epub:type="footnote" href="#ref_intro" id="note_intro">[*]</a> Cet article se base sur des travaux des auteurs, notamment dans le cadre du projet européen Calibre et dans le cadre du projet <a href="http://cccp-prosodie.org"><abbr>ANR CCCP</abbr>-Prosodie</a>. <a href="http://ssrn.com/abstract=1360683">Version complète</a> de cet article.</li>
        <li> <a epub:type="footnote" href="#ref_table1" id="note_table1">[†]</a> Nous restreignons au marché des portables qui est celui qui évolue le plus, et probablement, celui qui va s'imposer par rapport aux ordinateurs fixes. Mais le propos reste globalement vrai entre ordinateurs-tours de haut de gamme et les machines d'entrée de gamme.</li>
        <li> <a epub:type="footnote" href="#ref_1" id="note_1">[1]</a> Voir « Logiciels Libres : de l’utopie au marché », <cite>Terminal</cite>, numéro spécial (80-81), Automne-Hiver 1999.  </li>
        <li> <a epub:type="footnote" href="#ref_2" id="note_2">[2]</a> Voir « <a href="http://ec.europa.eu/enterprise/ict/policy/doc/2006-11-20-flossimpact.pdf">le logiciel libre est bon pour l’économie européenne, l’emploi des informaticiens et la compétitivité des entreprises…</a> ».  </li>
        <li> <a epub:type="footnote" href="#ref_3" id="note_3">[3]</a> <span class="auteur">Dang Nguyen</span>, Godefroy et Christian <span class="auteur">Genthon</span> « Les perspectives du secteur des TIC en Europe », dans : <cite><a href="http://www.marsouin.org">Cahiers de Recherche Marsouin</a></cite>, 4 2006.  </li>
        <li> <a epub:type="footnote" href="#ref_4" id="note_4">[4]</a> La page d’<abbr>IBM</abbr> retraçant la « <a href="http://www-5.ibm.com/e-business/ch/fr/linux/growing.html">saga Linux</a> ».  </li>
        <li> <a epub:type="footnote" href="#ref_5" id="note_5">[5]</a> Steven J. <span class="auteur">Vaughan-Nichols</span>, « <i lang="en" xml:lang="en" class="droit">Red Hat: The first billion dollar Linux company has arrived</i> », <cite><a href="http://www.znet.com">znet.com</a></cite>, 2012.  </li>
        <li> <a epub:type="footnote" href="#ref_6" id="note_6">[6]</a> <span class="auteur">Lakhani</span>, Karim R. et Robert G. <span class="auteur">Wolf</span> « <i lang="en" xml:lang="en" class="droit"> Why Hackers Do What They Do: Understanding Motivation and Effort in Free/Open Source Software Projects</i> », <cite lang="en" xml:lang="en">Perspectives on Free and Open Source Software</cite>, sous la direction de Joseph <span class="auteur">Feller</span> et al., <i lang="en" xml:lang="en" class="droit">Cambridge, Mass.: The <abbr>MIT</abbr> Press</i>, 2007.  </li>
        <li> <a epub:type="footnote" href="#ref_7" id="note_7">[7]</a> Dans le domaine de la voix sur <abbr>IP</abbr>, le logiciel libre <a href="http://www.asterisk.org/">Asterisk</a>, est une des offres les plus utilisées. Motorola a choisi un système Linux pour l’un des trois systèmes d’exploitation de ses terminaux mobiles.  </li>
        <li> <a epub:type="footnote" href="#ref_8" id="note_8">[8]</a> La part du financement étatique de la recherche des entreprises d’informatique américaines entre 1949 et 1959 est estimée à 59%, en moyenne pondérée. Voir <span class="auteur">Genthon</span>, Christia <cite>Croissance et crise de l’industrie informatique mondiale</cite>. Paris: Syros, 1995 p. 33. Cette part va de 46% pour l’entreprise <abbr>RCA</abbr> à 90% pour Raytheon. C. Genthon estime que le parc public, y compris le parc militaire, représentait encore, en 1962, 40% du parc installé en valeur.  </li>
        <li> <a epub:type="footnote" href="#ref_9" id="note_9">[9]</a> <span class="auteur">Rosenberg</span>, Nathan <cite lang="en" xml:lang="en">Inside the Black Box: Technology and Economics</cite>, <i lang="en" xml:lang="en" class="droit">Cambridge, MA: Cambridge University Press</i>, 1983.  </li>
        <li> <a epub:type="footnote" href="#ref_10" id="note_10">[10]</a> « <i lang="en" xml:lang="en" class="droit">The <abbr>US</abbr> armed forces, from the earliest days of their support for the development of computer technology, were surprisingly eager for technical information about this innovation to reach the widest possible audience</i> ». <span class="auteur">Langlois</span>, R. N. et D. C.  <span class="auteur">Mowery</span> « <i lang="en" xml:lang="en" class="droit">The Federal Goverment Role in the Development of the <abbr>U.S.</abbr> Software Industry: An Assessment</i> », dans : <cite lang="en" xml:lang="en">The International Computer Software Industry: A Comparative Study of Industry Evolution and Structure</cite>, sous la dir. de D. C. <span class="auteur">Mowery</span>, <i lang="en" xml:lang="en" class="droit">Oxford: Oxford University Press</i>, 1996 p. 58.  </li>
        <li> <a epub:type="footnote" href="#ref_11" id="note_11">[11]</a> Les effets d’échelle désignent les rendements croissants de production, c’est-à-dire la diminution des coûts unitaires de production avec le nombre d’unités produites.  </li>
        <li> <a epub:type="footnote" href="#ref_12" id="note_12">[12]</a> Voir <span class="auteur">McKusick</span>, Marshall K. « <i lang="en" xml:lang="en" class="droit">Twenty Years of Berkeley Unix. From <abbr>AT&amp;T</abbr>-Owned to Freely Redistributable</i>, dans Chris <span class="auteur">dibona</span>, Sam <span class="auteur">Ockman</span> et Marc <span class="auteur">Stone</span> (éd.) <cite lang="en" xml:lang="en">Open Sources: Voices from the Open Source Revolution</cite>, Sebastopol, CA: O’Reilly, 1999.  </li>
        <li> <a epub:type="footnote" href="#ref_13" id="note_13">[13]</a> <span class="auteur">Gray</span>, Pamela A. <cite lang="en" xml:lang="en">Open systems:a business strategy for the 1990’s</cite>, <i lang="en" xml:lang="en" class="droit">London: McGraw-Hill</i>, 1991.  </li>
        <li> <a epub:type="footnote" href="#ref_14" id="note_14">[14]</a> Le <a href="http://fr.wikipedia.org/wiki/Cyclades_(r\'eseau)">réseau Cyclades</a> peut lui-même être considéré parmi les projets qui ont donné naissance à Internet, mais aussi aux architectures d’interconnexion OSIA recommandées par l’ISO. Voir <span class="auteur">Pouzin</span>, Louis « <i lang="en" xml:lang="en" class="droit">The Cyclades computer network</i>, dans<cite><abbr> ICCC</abbr></cite> 2 1982.  </li>
        <li> <a epub:type="footnote" href="#ref_15" id="note_15">[15]</a> Les Unix libres <abbr>BSD</abbr> ont été développés à partir de l’Unix de Berkeley (<abbr>BSD</abbr> signifie « <i lang="en" xml:lang="en" class="droit">Berkeley Software Distribution</i> ».  </li>
        <li> <a epub:type="footnote" href="#ref_16" id="note_16">[16]</a> Voir les <a href="http://news.netcraft.com/archives/category/web-server-survey">chiffres de Netcraft</a> sur la diffusion des logiciels serveurs Internet.  </li>
        <li> <a epub:type="footnote" href="#ref_17" id="note_17">[17]</a> <span class="auteur">Genthon</span>, Christian et Denis <span class="auteur">Phan</span> « Les logiciels libres : un nouveau modèle ? », dans <cite>Terminal</cite>, 80 1999.  </li>
        <li> <a epub:type="footnote" href="#ref_18" id="note_18">[18]</a> <i lang="la" xml:lang="la">Ibid.</i></li>
        <li> <a epub:type="footnote" href="#ref_19" id="note_19">[19]</a> <span class="auteur">Horn</span>, François, <cite>L’économie des logiciels</cite>, Paris : La Découverte, 2004.  </li>
        <li> <a epub:type="footnote" href="#ref_20" id="note_20">[20]</a> Il est intéressant de noter que le projet GNU signifie « <i lang="en" xml:lang="en" class="droit">GNU’s Not Unix</i> », mettant en garde, dans l’esprit de son fondateur Richard Stalmann, contre une dérive telle que celle qu’avait connue Unix.  </li>
        <li> <a epub:type="footnote" href="#ref_21" id="note_21">[21]</a> <span class="auteur">Fitzgerald</span>, Brian, « <i lang="en" xml:lang="en" class="droit"><a href="http://ulir.ul.ie/handle/10344/92">The transformation of open source software</a></i> », dans <cite lang="en" xml:lang="en">MIS Quarterly</cite>, 30 2006, Nr. 3.  </li>
        <li> <a epub:type="footnote" href="#ref_22" id="note_22">[22]</a> <span class="auteur">Horn</span>, François, <cite>L’économie des logiciels</cite>, Paris : La Découverte, 2004.  </li>
        <li> <a epub:type="footnote" href="#ref_23" id="note_23">[23]</a> <span class="auteur">Zimmermann</span>, Jean-Benoît, « L’industrie du logiciel, de la protection à la normalisation », dans Baslé <span class="auteur">Dufour</span> (éd.) <cite>Changement institutionnel et changement technologique : évaluation, droits de propriété intellectuelle, système national d’innovation</cite>, <abbr>CNRS</abbr> Editions. Paris, 1995.  </li>
        <li> <a epub:type="footnote" href="#ref_24" id="note_24">[24]</a> <span class="auteur">horn</span> <i lang="la" xml:lang="la">op.cit.</i> </li>
        <li> <a epub:type="footnote" href="#ref_25" id="note_25">[25]</a> Stallman a « inventé » le concept de Logiciel Libre, avec la création de la licence GNU/<abbr>GPL</abbr> et de la Fondation pour le Logiciel Libre (<i lang="en" xml:lang="en" class="droit">Free Software Foundation</i>, <abbr><a href="http://www.fsf.org">FSF</a></abbr>), l’organisme qui les produit.  </li>
        <li> <a epub:type="footnote" href="#ref_26" id="note_26">[26]</a> POSIX avait pour objet de proposer un ensemble d’interfaces standardisées permettant l’interopérabilité des différentes versions d’Unix entre elles et avec des logiciels d’application.  </li>
        <li> <a epub:type="footnote" href="#ref_27" id="note_27">[27]</a> <span class="auteur">Dréan</span>, Gérard <cite>L’industrie informatique, structure, économie, perspectives</cite>, Paris: Masson, 1996.  </li>
        <li> <a epub:type="footnote" href="#ref_28" id="note_28">[28]</a> <span class="auteur">Jullien</span>, Nicolas et Jean-Benoît <span class="auteur">zimmermann</span> « <i lang="en" xml:lang="en" class="droit">Firms’ contribution to open-source software and the dominant user’s skill</i> », dans : <cite lang="en" xml:lang="en">European Management Revue</cite>, 6 2009.  </li>
        <li> <a epub:type="footnote" href="#ref_29" id="note_29">[29]</a> <span class="auteur">Arthur</span>, W. Brian, « <i lang="en" xml:lang="en" class="droit"><a href="http://www.santafe.edu/arthur">Competing technologies, increasing returns and lock-in by historical events: The dynamics of allocations under increasing returns to scale</a></i> », dans <cite lang="en" xml:lang="en">Economic Journal</cite>, 99 (1989) p. 116-131.  </li>
        <li> <a epub:type="footnote" href="#ref_30" id="note_30">[30]</a> <span class="auteur">Hippel</span>, Eric von, <cite lang="en" xml:lang="en">The Sources of Innovation</cite> Oxford : Oxford University Press, 1994.  </li>
        <li> <a epub:type="footnote" href="#ref_31" id="note_31">[31]</a> <span class="auteur">Kogut</span>, Bruce et Anca <span class="auteur">Metiu</span>, « <i lang="en" xml:lang="en"><a href="http://oxrep.oxfordjournals.org/content/17/2/248">open Source Software Development and Distributed Innovation</a></i> », dans <cite lang="en" xml:lang="en">Oxford Review of Economic Policy</cite> 17.2 (2001), p.248-264.  </li>
        <li> <a epub:type="footnote" href="#ref_32" id="note_32">[32]</a> <i lang="en" xml:lang="en">Operating System</i> (système d’exploitation).  </li>
        <li> <a epub:type="footnote" href="#ref_33" id="note_33">[33]</a> On appelle stratégie opportuniste ou comportement opportuniste (<i lang="en" xml:lang="en">free-riding</i> en anglais) le fait de bénéficier des contributions, des efforts des autres sans apporter sa propre contribution.  </li>
        <li> <a epub:type="footnote" href="#ref_34" id="note_34">[34]</a> <span class="auteur">Foray</span>, Dominique, Sylvie <span class="auteur">Thoron</span> et Jean-Benoît <span class="auteur">Zimmerman</span>, « <i lang="en" xml:lang="en">Open software: knowledge openness and cooperation in cyberspace</i> », dans <cite lang="en" xml:lang="en">Internet and digital economics: Principles, methods and applications</cite>, sous la dir. d’Éric <span class="auteur">Brousseau</span> et Nicolas <span class="auteur">Curien</span>, <i lang="en" xml:lang="en" class="droit">New York : Cambridge University Press</i>, 2007.  </li>
        <li> <a epub:type="footnote" href="#ref_35" id="note_35">[35]</a> Cobalt a été racheté par SUN, mais l’intégration de cette offre n’a pas suffi pour contrer l’invasion des <abbr>PC</abbr> sous GNU/Linux, ce qui a conduit au rachat de SUN par Oracle.  </li>
        <li> <a epub:type="footnote" href="#ref_36" id="note_36">[36]</a> <span class="auteur">Romer</span>, Paul M. « <i lang="en" xml:lang="en">The economics of new ideas and new goods</i> », dans <cite lang="en" xml:lang="en">Annual Conference on Development Economics</cite> <i lang="en" xml:lang="en" class="droit">Washington D.C.</i> : Banque Mondiale, 1993.  </li>
        <li> <a epub:type="footnote" href="#ref_37" id="note_37">[37]</a> Ce sont l’<i lang="en" xml:lang="en" class="droit">Apache Foundation</i> pour <a href="http://www.apache.org">Apache</a>, l’<i lang="en" xml:lang="en" class="droit"><a href="http://www.isc.org">Internet Systems Consortium</a></i> pour des logiciels comme BIND (serveur de <abbr>DNS</abbr>, La <i lang="en" xml:lang="en" class="droit"><a href="http://www.linux-foundation.org">Linux Foundation</a></i> pour Linux… </li>
        <li> <a epub:type="footnote" href="#ref_38" id="note_38">[38]</a> <span class="auteur">Gadray</span>, Jean <cite>Socio-économie des services</cite>, Paris : La Découverte, 2003.  </li>
        <li> <a epub:type="footnote" href="#ref_39" id="note_39">[39]</a> <span class="auteur">Hippel</span>,<i lang="la" xml:lang="la">op.  cit.</i>.  </li>
        <li> <a epub:type="footnote" href="#ref_40" id="note_40">[40]</a><span class="auteur">Dahlander</span>, Linus et Mats G. <span class="auteur">Magnusson</span> « <i lang="en" xml:lang="en" class="droit">How do Firms Make Use of Open Source Communities?</i> », dans : <cite lang="en" xml:lang="en">Long Range Planning</cite> 41 (2008), p. 629-649.  </li>
        <li> <a epub:type="footnote" href="#ref_41" id="note_41">[41]</a> <span class="auteur">Jullien</span> et <span class="auteur">Zimmermann</span>, <i lang="la" xml:lang="la">op. cit.</i>.  </li>
        <li> <a epub:type="footnote" href="#ref_42" id="note_42">[42]</a> <span class="auteur">Dahlander</span> et <span class="auteur">Magnusson</span>, <i lang="la" xml:lang="la">op. cit.</i>.  </li>
        <li> <a epub:type="footnote" href="#ref_43" id="note_43">[43]</a> <span class="auteur">Dahlander</span>, Linus et Mats G. <span class="auteur">Magnusson</span> « <i lang="en" xml:lang="en" class="droit">Relationships Between Open Source Software Companies and Communities: Observations from Nordic Firms</i> », dans : <cite lang="en" xml:lang="en">Research Policy</cite> 34 (2005), p.481-493.  </li>
        <li> <a epub:type="footnote" href="#ref_44" id="note_44">[44]</a> <span class="auteur">Cohen</span>, Wesley M. et Daniel A. <span class="auteur">Levinthal</span> « <i lang="en" xml:lang="en" class="droit">Innovation and Learning: The Two Faces of R&amp;D. Economic Journal</i> » 99 (1989) p.569-596.  </li>
      </ol>
    </aside>
  </body>
</html>
